{
  "hash": "044b3126f3fcff106b6040273fc4ebc9",
  "result": {
    "markdown": "---\ntitle:  \"Data manipulation with tidyverse\"\nsubtitle: \"Introduction to R: Class 3\"\ndescription: \"Data manipulation with `dplyr`\"\n---\n\n\n## Objectives\n\nIn the last section, \nwe imported a clinical cancer dataset and learned to manipulate it using base R \n(tools included in every R installation).\n\nIn this session,\nwe'll continue to work with the same dataset,\nbut will introduce a set of tools specifically designed for data science in R. \nBy the end of this session, you should be able to:\n\n- install and load packages \n- use tidyverse tools to import data and access rows/columns\n- combine commands using pipes\n- transform and summarize data\n\n## Installing and loading packages\n\nPlease ensure RStudio is open with your project directory path (e.g., `~/Desktop/intro_r`)\nlisted at the top of your Console.\nIf you do not see the path to your project directory,\ngo to `File -> Open Project` and navigate to the location of your project directory.\nAlternatively, using your operating system's file browser,\ndouble click on the `r_intro.Rrpoj` file.\n\nCreate a new R script called `class3.R`,\nand add `# Introduction to R: Class 3` as a title.\n\nFor this lesson, \nwe'll be working with a group of R packages called `tidyverse`.\nA package is a group of related functions that help you accomplish particular tasks.\n[`tidyverse`](https://www.tidyverse.org) packages have been designed specifically\nto support tasks related to data science,\nsuch as data manipulation, filtering, and visualization. \n\nThe first thing we need to do is install the software:\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\nThe following package(s) will be installed:\n- tidyverse [2.0.0]\nThese packages will be installed into \"~/Documents/Teaching/computational_statistics/2023/new_website/renv/library/R-4.3/aarch64-apple-darwin20\".\n\n# Installing packages --------------------------------------------------------\n- Installing tidyverse ...                      OK [linked from cache]\nSuccessfully installed 1 package in 6 milliseconds.\n```\n:::\n:::\n\n\nA few notes about installing packages:\n\n- You only need to perform this installation once per computer,\nor when updating R or the package. \n- If you see red text output in the Console during this installation,\ndon't be alarmed: \nthis doens't necessarily indicate a problem.\nYou are seeing a report of the various pieces of software being downloaded and installed.\n- If prompted, you should install all packages (say yes or all), \nas well as yes to compiling any packages\n- When the installation is complete (this may take several minutes),\nyou'll see the command prompt (`>`) in your Console.\n\nOnce you have the software installed,\nyou'll need to load it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load library/package\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\nLoading packages is similar to opening a software application on your computer;\nit makes a previously installed set of software available for use.\nA few notes about loading packages:\n\n-  You'll need to load packages every time you open RStudio (or R restarts)\n- Loading `tidyverse` loads a collection of packages; \nthese are listed under \"Attaching packages\"\n- There are many other packages included as dependencies. \nIf some of them did not install successfully, \nyou will receive an error at this step.\nFor this lesson, \nyou can try `library(dplyr)`, \nand ask your instructor for help later.\n- The section in the output above referencing \"Conflicts\" \nshows you which functions you just loaded have \nnames identical to packages you already have loaded (in base R).\nThis shouldn't affect the code we write in this lesson,\nthough it's useful to know the double colon syntax (::) \nallows you to reference functions in a different package with same name.\n\nYou can check to make sure the new package we'll be using is available\nby executing `?select` in the Console, \nor by searching for that function in the help panel.\nYou can also look in the \"Packages\" tab in the same panel. \nIf the package (in this case, either `tidyverse` or `dplyr`) \nis present in the list, it's installed.\nIf the box next to the package name is checked,\nit's loaded.\nIn this lesson, \nif you receive an error saying a function isn't available or recognized,\ncheck to make sure the package is loaded.\n\n## Selecting columns and rows\n\nThe first task we'll undertake with our newly installed `tidyverse` tools \nis importing our data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# import data\nclinical <- read_csv(\"data/clinical.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 6832 Columns: 20\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (12): primary_diagnosis, tumor_stage, vital_status, morphology, state, t...\ndbl  (8): age_at_diagnosis, days_to_death, days_to_birth, days_to_last_follo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nNote that this function looks similar to what we used in the last lesson (`read.csv`), \nbut the underscore replacing the dot means it's actually a different function.\nIn fact, this is the data import function from `tidyverse`.\nThe output provided by this function indicates a few key differences\nwith our import yesterday. \n\nThe data import execution includes a description of how each variable (column) is interpreted. \nIn our data's case, the numeric data are `col_double`\nand the character data are `col_character` (not factors!).\n\nWe can explore these differences further:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# inspect object\nstr(clinical)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nspc_tbl_ [6,832 × 20] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ primary_diagnosis          : chr [1:6832] \"C34.1\" \"C34.1\" \"C34.3\" \"C34.1\" ...\n $ tumor_stage                : chr [1:6832] \"stage ia\" \"stage ib\" \"stage ib\" \"stage ia\" ...\n $ age_at_diagnosis           : num [1:6832] 24477 26615 28171 27154 29827 ...\n $ vital_status               : chr [1:6832] \"dead\" \"dead\" \"dead\" \"alive\" ...\n $ morphology                 : chr [1:6832] \"8070/3\" \"8070/3\" \"8070/3\" \"8083/3\" ...\n $ days_to_death              : num [1:6832] 371 136 2304 NA 146 ...\n $ state                      : chr [1:6832] \"live\" \"live\" \"live\" \"live\" ...\n $ tissue_or_organ_of_origin  : chr [1:6832] \"C34.1\" \"C34.1\" \"C34.3\" \"C34.1\" ...\n $ days_to_birth              : num [1:6832] -24477 -26615 -28171 -27154 -29827 ...\n $ site_of_resection_or_biopsy: chr [1:6832] \"C34.1\" \"C34.1\" \"C34.3\" \"C34.1\" ...\n $ days_to_last_follow_up     : num [1:6832] NA NA 2099 3747 NA ...\n $ cigarettes_per_day         : num [1:6832] 10.96 2.19 1.64 1.1 NA ...\n $ years_smoked               : num [1:6832] NA NA NA NA NA NA NA NA NA NA ...\n $ gender                     : chr [1:6832] \"male\" \"male\" \"female\" \"male\" ...\n $ year_of_birth              : num [1:6832] 1936 1931 1927 1930 1923 ...\n $ race                       : chr [1:6832] \"white\" \"asian\" \"white\" \"white\" ...\n $ ethnicity                  : chr [1:6832] \"not hispanic or latino\" \"not hispanic or latino\" \"not hispanic or latino\" \"not hispanic or latino\" ...\n $ year_of_death              : num [1:6832] 2004 2003 NA NA 2004 ...\n $ bcr_patient_barcode        : chr [1:6832] \"TCGA-18-3406\" \"TCGA-18-3407\" \"TCGA-18-3408\" \"TCGA-18-3409\" ...\n $ disease                    : chr [1:6832] \"LUSC\" \"LUSC\" \"LUSC\" \"LUSC\" ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   primary_diagnosis = col_character(),\n  ..   tumor_stage = col_character(),\n  ..   age_at_diagnosis = col_double(),\n  ..   vital_status = col_character(),\n  ..   morphology = col_character(),\n  ..   days_to_death = col_double(),\n  ..   state = col_character(),\n  ..   tissue_or_organ_of_origin = col_character(),\n  ..   days_to_birth = col_double(),\n  ..   site_of_resection_or_biopsy = col_character(),\n  ..   days_to_last_follow_up = col_double(),\n  ..   cigarettes_per_day = col_double(),\n  ..   years_smoked = col_double(),\n  ..   gender = col_character(),\n  ..   year_of_birth = col_double(),\n  ..   race = col_character(),\n  ..   ethnicity = col_character(),\n  ..   year_of_death = col_double(),\n  ..   bcr_patient_barcode = col_character(),\n  ..   disease = col_character()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n:::\n:::\n\n\nYou may notice the presence of `tbl` and related labels in the classes for this object. \n`tbl` stands for [tibble](https://tibble.tidyverse.org), \nwhich is a type of data frame with specific constraints to ensure better data handling. \n\nIf you preview the dataset, \nit will look the same, \nand we can interact with the data in the same way.\nThese assumptions about the data mesh nicely with the other tools in the `tidyverse`.\n\nNow that our data are imported,\nwe can explore the `tidyverse` functions for extracting parts of the dataset.\n\nFirst, we can explore selecting certain columns by name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# selecting columns with tidyverse (dplyr)\nsel_columns <- select(clinical, tumor_stage, ethnicity, disease)\n```\n:::\n\n\nThe syntax for the `select` function is to specify the dataset first,\nthen the names of each of the columns you would like to retain in the output object.\nIf we look at the object, \nwe'll see it has only three columns but all rows.\n\nYou'll note that the column headers don't require quotation marks;\nthis is a shortcut programmed into `tidyverse` functions.\n\nAs with base R functions, we can also select a range of columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# select range of columns\nsel_columns2 <- select(clinical, tumor_stage:vital_status)\n```\n:::\n\n\nIn addition to these approaches,\nwe can also use other helper functions for selecting columns:\n`starts_with()`, `ends_with()`, and `contains()`\nare examples that assist in extracting columns with headers that meet certain conditions. \nFor example, using `starts_with(tumor)` \nin place of the column names will give you all columns that start with the word tumor.\n\nWe can use a separate function to extract rows that meet particular conditions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# select rows conditionally: keep only lung cancer cases\nfiltered_rows <- filter(clinical, disease == \"LUSC\") \n```\n:::\n\n\nThe syntax here is similar to `select`, \nand the conditional filters can be applied in similarly to base R functions.\n\n> #### Challenge-columns\n> Create a new object from clinical called race_disease that includes only the race, > ethnicity, and disease columns.\n\n> #### Challenge-rows \n> Create a new object from race_disease called race_BRCA that includes only BRCA (from `disease`).\n\n## Combining commands\n\nThe last challenges used an intermediate object to obtain an object with two subsetting methods applied. \nIt's common in data science to apply more than one requirement for extracting data.\nIf you want to avoid creating an intermediate object, \nyou could nest one command inside the other:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# same task as challenges, but nested commands \nrace_BRCA2 <- select(filter(clinical, disease == \"BRCA\"), race, ethnicity, disease)\n```\n:::\n\n\nIn this case, `filter(clinical, disease == \"BRCA\")` becomes the input for `select`.\n\nWhile this is a common approach, \nespecially in base R,\nit can be difficult for us as coders to read and interpret the code.\n\nOne of the most useful features of `tidyverse` is its inclusion of a programming method called pipes. \nThis approach can be found in many programming languages, \nin part because of its utility:\na pipe sends the output from the lefthand side of the symbol \nas the input for the righthand side.\nIn R, \npipes are represented as `%>%`.\n\nWe can use pipes to connect the same two data extraction tasks:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# same task as above, but with pipes\npiped <- clinical %>%\n  select(race, ethnicity, disease) %>%\n  filter(disease == \"BRCA\")\n```\n:::\n\n\nThe command above starts by naming the object that will result from this assignment.\nThe dataset is named as the first input.\nBecause executing the name of an object sends the object contents as output, \nthis means the second line receives the object as input. \nThe output from the `select` line is sent as input to the `filter` line.\nThis effectively demonstrates how pipes can be used to connect multiple commands together.\n\n> Now that we are running code in chunks that span multiple lines,\n> you can see one of the other nice features of RStudio:\n> your cursor can be placed on any line of the multi-line chunk\n> when you execute, and the entire set of code will run together.\n\nThese examples also help highlight the importance of style and convention in code formatting.\nAfter the first line, the code is indented.\nWhile this isn't necessary for the code to work,\nit does make it a lot easier to read and understand the code.\n\nLet's take a look at another example of piped commands: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract race, ethinicity, and disease from cases born prior to 1930\npiped2 <- clinical %>%\n  filter(year_of_birth < 1930) %>%\n  select(race, ethnicity, disease)\n```\n:::\n\n\nIn the code above, we're applying a mathematical condition to find specific rows,\nand the selecting certain columns.\nDoes the order of commands differ? \nWe can switch the order of the `filter` and `select` lines to see:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npiped3 <- clinical %>%\n  select(race, ethnicity, disease) %>%\n  filter(year_of_birth < 1930)\n```\n:::\n\n\nThe code above should give you an error, \nbecause in this case, the order does matter!\nThe output from the second line does not include the `year_of_birth` column,\nso R is unable to apply the filter in the third line.\n\n> #### Challenge-pipes \n> Use pipes to extract the columns `gender`, `years_smoked`, and `year_of_birth`\n> from the object `clinical` for only living patients (vital_status)\n> who have smoked fewer than 1 `cigarettes_per_day`.\n\n## Mutate\n\nThis lesson so far has mostly shown new ways of accomplishing the same tasks we learned in the last lesson.\n`tidyverse` includes much more functionality, \nhowever, including the ability to `mutate` columns.\nCommon tasks for which `mutate` is useful include unit conversions,\ntransformation, and creating ratios from among existing columns.\n\nWe can use this function to convert the `days_to_death` column to years:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# convert days to years\nclinical_years <- clinical %>%\n  mutate(years_to_death = days_to_death / 365)\n```\n:::\n\n\nThe actual conversion works by providing a formula (`days_to_death / 365`) and the name of the new column (`years_to_death`).\nIf you inspect the resulting object, you'll see `years_to_death` added as a new column at the end of the table.\n\n> `mutate` works by retaining all previous columns and creating new columns as per the formula specified.\n> `tidyverse` also includes `transmute`, \n> which drops the existing columns used to calculcate the new columns.\n\nWe can use `mutate` to perform multiple conversions at once:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# convert days to year and months at same time, and we don't always need to assign to object\nclinical %>%\n  mutate(years_to_death = days_to_death / 365,\n         months_to_death = days_to_death / 30) %>%\n  glimpse() # preview data output\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 6,832\nColumns: 22\n$ primary_diagnosis           <chr> \"C34.1\", \"C34.1\", \"C34.3\", \"C34.1\", \"C34.3…\n$ tumor_stage                 <chr> \"stage ia\", \"stage ib\", \"stage ib\", \"stage…\n$ age_at_diagnosis            <dbl> 24477, 26615, 28171, 27154, 29827, 23370, …\n$ vital_status                <chr> \"dead\", \"dead\", \"dead\", \"alive\", \"dead\", \"…\n$ morphology                  <chr> \"8070/3\", \"8070/3\", \"8070/3\", \"8083/3\", \"8…\n$ days_to_death               <dbl> 371, 136, 2304, NA, 146, NA, 345, 716, 280…\n$ state                       <chr> \"live\", \"live\", \"live\", \"live\", \"live\", \"l…\n$ tissue_or_organ_of_origin   <chr> \"C34.1\", \"C34.1\", \"C34.3\", \"C34.1\", \"C34.3…\n$ days_to_birth               <dbl> -24477, -26615, -28171, -27154, -29827, -2…\n$ site_of_resection_or_biopsy <chr> \"C34.1\", \"C34.1\", \"C34.3\", \"C34.1\", \"C34.3…\n$ days_to_last_follow_up      <dbl> NA, NA, 2099, 3747, NA, 3576, NA, NA, 1810…\n$ cigarettes_per_day          <dbl> 10.9589041, 2.1917808, 1.6438356, 1.095890…\n$ years_smoked                <dbl> NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, 26…\n$ gender                      <chr> \"male\", \"male\", \"female\", \"male\", \"male\", …\n$ year_of_birth               <dbl> 1936, 1931, 1927, 1930, 1923, 1942, 1953, …\n$ race                        <chr> \"white\", \"asian\", \"white\", \"white\", \"not r…\n$ ethnicity                   <chr> \"not hispanic or latino\", \"not hispanic or…\n$ year_of_death               <dbl> 2004, 2003, NA, NA, 2004, NA, 2005, 2006, …\n$ bcr_patient_barcode         <chr> \"TCGA-18-3406\", \"TCGA-18-3407\", \"TCGA-18-3…\n$ disease                     <chr> \"LUSC\", \"LUSC\", \"LUSC\", \"LUSC\", \"LUSC\", \"L…\n$ years_to_death              <dbl> 1.0164384, 0.3726027, 6.3123288, NA, 0.400…\n$ months_to_death             <dbl> 12.366667, 4.533333, 76.800000, NA, 4.8666…\n```\n:::\n:::\n\n\nThe code above also features a new function, `glimpse`,\nthat can be useful when developing new piped code.\nNote that we did not assign the output above to a new object;\nwe allowed it to be printed to the Console.\nBecause this is a large dataset, \nthat type of output can be unweildy.\n`glimpse` allows us to see a preview of the data, \nincluding the two new columns created.\n\n> #### Challenge-lung\n> Extract only lung cancer patients (LUSC, from disease)\n> and create a new column called `total_cig` representing\n> an estimate of the total number of cigarettes smoked\n> (use columns `years_smoked` and `cigarettes_per_day`).\n\n## Split-apply-combine\n\nOur `clinical` dataset includes categorical (character) data.\nOne example is the `gender` column.\nWe can assess the different categories available using a base R function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# show categories in gender\nunique(clinical$gender)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"male\"   \"female\" NA      \n```\n:::\n:::\n\n\n`tidyverse` includes an approach called split-apply-combine that allows us to: \n\n- split data into groups, \n- apply a task for each group, \n- combine the results back together into a single table.\n\nWe can try out this approach by counting the number of each gender in our dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# count number of individuals of each gender\nclinical %>%\n  group_by(gender) %>%\n  tally() \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  gender     n\n  <chr>  <int>\n1 female  3535\n2 male    3258\n3 <NA>      39\n```\n:::\n:::\n\n\n`group_by` is not particularly useful by itself, \nbut powerful together with a second function like `tally`.\nThe two columns in the resulting tibble represent\nthe categories from `group_by` and the number of cases for each gender (n).\n\nAn additional function for use with `group_by` is `summarize`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# summarize average days to death by gender\nclinical %>%\n  group_by(gender) %>%\n  summarize(mean_days_to_death = mean(days_to_death, na.rm = TRUE))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  gender mean_days_to_death\n  <chr>               <dbl>\n1 female               947.\n2 male                 826.\n3 <NA>                 NaN \n```\n:::\n:::\n\n\nSimilar to `mutate`, \nwe provide `summarize` with a formula indicating how we would like the groups to be handled.\n\nIn the command above,\nwe use `na.rm = TRUE` to exclude missing data from the calculation of mean from `days_to_death`. \nWe still have `NA` reported in the output table, though,\nbecause of the `NA` category in `gender`.\n\nWe can apply an additional filter to remove this missing data,\nprior to grouping:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove NA\nclinical %>%\n  filter(!is.na(gender)) %>%\n  group_by(gender) %>%\n  summarize(mean_days_to_death = mean(days_to_death))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  gender mean_days_to_death\n  <chr>               <dbl>\n1 female                 NA\n2 male                   NA\n```\n:::\n:::\n\n\n> #### Challenge-smoke-complete\n> Create object called smoke_complete from clinical that\n> contains no missing data for cigarettes per day or age at diagnosis.\n\n> #### Challenge-save\n> How do you save resulting table to file?\n> How would you find this answer?\n\nThe solution to the challenges above represent the first of two datasets we'll be using for data visualization in our next class. \nMake sure you've executed this code to save the filtered data file for use next time:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsmoke_complete <- clinical %>%\n  filter(!is.na(age_at_diagnosis)) %>%\n  filter(!is.na(cigarettes_per_day))\nwrite_csv(smoke_complete, \"data/smoke_complete.csv\")\n```\n:::\n\n\nThe command above uses `write_csv`, \nwhich is the `tidyverse` method of saving a csv file.\nBase R possesses a function, `write.csv`, \nthat performs a similar task,\nbut by default includes quotation marks around cells with character data as well as row names (sequential numbers, unless otherwise specified).\n\n> #### Challenge-birth-complete\n> Create a new object called birth_complete that contains\n> no missing data for year of birth or vital status.\n\nThis challenge begins filtering the second of our two datasets for next time. \nMake sure you include the filter to remove missing data that's been encoded as \"not reported\"!\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make sure ALL missing data is removed!\nbirth_complete <- clinical %>%\n  filter(!is.na(year_of_birth)) %>%\n  filter(!is.na(vital_status)) %>%\n  filter(vital_status != \"not reported\")\n```\n:::\n\n\n## Filtering data based on number of cases of each type\n\nWe're going to perform one last manipulation on this second dataset for next time,\nwhich will allow us to reduce the total number of cancer types present in this dataset.\n\nFirst, we'll need to count how many cases for each cancer type exist in the dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# counting number of records in each cancer\ncancer_counts <- clinical %>%\n  count(disease) %>%\n  arrange(n) \n```\n:::\n\n\nThe `count` function is similar to `tally`, \nbut doesn't need to have `group_by` applied first.\nThe `arrange` function added at the end sorts the table using the column specified.\nAlthough this isn't necessary for the analysis to proceed, \nit makes it easier for us to interpret the results.\n\nNext, we'll identify which cancer types are represented by at least 500 cases in this dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get names of frequently occurring cancers\nfrequent_cancers <- cancer_counts %>%\n  filter(n >= 500) \n```\n:::\n\n\nWe can then use this object to filter based on the number of cases:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract data from cancers to keep\nbirth_reduced <- birth_complete %>%\n  filter(disease %in% frequent_cancers$disease)\n```\n:::\n\n\nThe new syntax here is `%in%`, \nwhich allows you to compare each entry in `disease` from `birth_complete`\nto the disease column in `frequent_cancers` \n(remember that `frequent_cancers$disease` means the `disease` column from `frequent_cancers`). \nThis keeps only cases from the `birth_complete` dataset that are from cancers that are frequently occurring.\n\nFinally, we'll write the final output to a file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# save results to file in data/ named birth_reduced\nwrite_csv(birth_reduced, \"data/birth_reduced.csv\")\n```\n:::\n\n\n> #### Challenge-tumor\n> Extract all tumor stages with more than 200 cases\n> (Hint: also check to see if there are any other missing/ambiguous data!)\n\n## Wrapping up\n\nIn this session, \nwe acquainted ourselves with `tidyverse`,\nand learned some tools for data filtering and manipulation.\nWe covered examples from many of the main categories of data manipulation tasks; \nif you'd like more information on these functions and others available \n(including methods of joining multiple tables together),\nplease check out the [`dplyr` cheatsheet](https://github.com/rstudio/cheatsheets/raw/master/data-transformation.pdf).\n\nIn the next session, \nwe'll wrap up the course by creating publication-quality images using `ggplot2`, \na data visualization package in `tidyverse`,\nand the two datasets we filtered in the sections above.\n\n\n## Extra exercises\n\nThe following exercises all use the same `clinical` data from this class.\n\n#### Challenge-ethnicity\nHow many hispanic or latino individuals in clinical are not also white?\nWhat are their races?\n\n#### Challenge-years\nCreate a new column for clinical called `age_at_death` that calculates this statistic (in years) from `year_of_birth` and `year_of_death`.\n\n#### Challenge-helpers\n`dplyr` includes several \"helpers\" that allows selection of columns\nmeeting particular criteria\n(described on the first page of the dplyr cheatsheet near the top of the right hand column:\nhttps://github.com/rstudio/cheatsheets/raw/master/data-transformation.pdf).\nUsing one of these tools, extract all columns that include \"diagnosis\".\n\n#### Challenge-combine\nHow many patients are hispanic or latino patients (column ethnicity),\ndied after the year 2000 (year_of_death),\nand possess no missing data for cigarettes per day?\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}