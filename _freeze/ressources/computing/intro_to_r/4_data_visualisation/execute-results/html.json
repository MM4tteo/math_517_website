{
  "hash": "b069a6b447c23e1154a8adb643a98856",
  "result": {
    "markdown": "---\ntitle:  \"Data visualization in R\"\nsubtitle: \"Introduction to R: Class 4\"\ndescription: \"Data visualization in `ggplot2`\"\n---\n\n\n## Objectives\n\nSo far in this course, we have:\n\n- learned basic R syntax, including working with objects and functions\n- imported data into R for manipulation with base R methods\n- loaded `tidyverse` and used its data science tools to manipulate and filter data\n\nThis last material continues our explorations of tidyverse with a specific focus on data visualization.\nAfter completing this material, \nyou should be able to use `ggplot2` in R to:\n\n- create and modify scatterplots and boxplots\n- represent time series data as line plots\n- split figures into multiple panels\n- customize your plots\n\n## Getting set up\n\nSince we are continuing to work with data in `tidyverse`, \nwe need to make sure all of our data and packages are available for use.\n\nOpen your project in RStudio. Create a new script called `class4.R`,\nadd a title, \nand enter the following code with comments:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load library\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.3     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\n# read in first filtered data from last class\nbirth_reduced <- read_csv(\"data/birth_reduced.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 4169 Columns: 20\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (12): primary_diagnosis, tumor_stage, vital_status, morphology, state, t...\ndbl  (8): age_at_diagnosis, days_to_death, days_to_birth, days_to_last_follo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\n# read in second filtered data from last class\nsmoke_complete <- read_csv(\"data/smoke_complete.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 1152 Columns: 20\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (12): primary_diagnosis, tumor_stage, vital_status, morphology, state, t...\ndbl  (8): age_at_diagnosis, days_to_death, days_to_birth, days_to_last_follo...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n:::\n\n\nIf you have trouble accessing your data and see an error indicating the file is not found,\nit is likely one of the following problems:\n\n1. Check to make sure your project is open in RStudio. \nYou should see the path to your project directory (e.g., `~/Desktop/introR`) appear at the top of the console \n(above the window showing output). \nIf this doesn't appear, you should save your script in your project directory, then go to `File -> Open Project`.\nNavigate to the location of your project directory and open the folder, then try to reexecute your code.\n2. Make sure you have the two datasets (`birth_reduced.csv` and `smoke_complete.csv`) in your `data` directory. \nPlease reference the materials from class 3 to filter the original clinical dataset and export these data.\n\nOnce your data are imported appropriately, \nwe can create a quick plot: \n\n::: {.cell}\n\n```{.r .cell-code}\n# simple plot from base R from the smoke_complete dataset\nplot(x=smoke_complete$age_at_diagnosis, y=smoke_complete$cigarettes_per_day)\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/base_plot-1.png){width=672}\n:::\n:::\n\n\nThis plot is from base R.\nIt gives you a general idea about the data, \nbut isn't very aesthetically pleasing. \nOur work today will focus on developing more refined plots using `ggplot2`, \nwhich is part of the `tidyverse`.\n\n## Intro to ggplot2 and scatterplots\n\nThere are three steps to creating a ggplot.\nWe'll start with a scatterplot, which is used to compare quantitative (continuous) variables.\n\n1. bind data: create a new plot with a designated dataset\n\n::: {.cell}\n\n```{.r .cell-code}\n# basic ggplot\nggplot(data = smoke_complete) # bind data to plot\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/data_bind-1.png){width=672}\n:::\n:::\n\n\nThe last line of code creates an empty plot, \nsince we didn't include any instructions for how to present the data.\n\n2. specify the aesthetic: maps the data to axes on a plot\n\n::: {.cell}\n\n```{.r .cell-code}\n# basic ggplot\nggplot(data = smoke_complete, aes(x = age_at_diagnosis, \n                           y = cigarettes_per_day)) # specify aesthetics (axes)\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/aesthetic-1.png){width=672}\n:::\n:::\n\n\nThis adds labels to the axis, but no data appear because we haven't specified how they should be represented\n\n3. add layers: visual representation of plot, including ways through which data are represented (geometries or shapes) and themes (anything not the data, like fonts)\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = smoke_complete,\n       mapping = aes(x = age_at_diagnosis, y = cigarettes_per_day)) + \n  geom_point() # add a layer of geometry\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/geom-1.png){width=672}\n:::\n:::\n\n\nThe plus sign (`+`) is used here to connect parts of `ggplot` code together.\nThe line breaks and indentation used here represents the convention for `ggplot`, \nwhich makes the code more readible and easy to modify.\n\nIn the code above, note that we don't need to include the labels for `data =` and `mapping =`. \nIt's also common to include the mapping (`aes`) in the `geom`, which allows for more flexibility in customizing \n(we'll get to this later!).\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(smoke_complete) + \n  geom_point(aes(x = age_at_diagnosis, y = cigarettes_per_day)) \n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/abb-1.png){width=672}\n:::\n:::\n\n\nThis plot is identical to the previous plot, despite the differences in code.\n\n## Customizing plots\n\nNow that we have the data generally displayed the way we'd like, we can start to customize a plot.\n\n::: {.cell}\n\n```{.r .cell-code}\n# add transparency with alpha\nggplot(smoke_complete) +\n  geom_point(aes(x = age_at_diagnosis, y = cigarettes_per_day), alpha = 0.1)\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/alpha-1.png){width=672}\n:::\n:::\n\n\nTransparency is useful to help see the distribution of data, \nespecially when points are overlapping.\n\n::: {.cell}\n\n```{.r .cell-code}\n# change color of points\nggplot(smoke_complete) +\n  geom_point(aes(x = age_at_diagnosis, y = cigarettes_per_day), \n             alpha = 0.1, color = \"green\")\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/color-1.png){width=672}\n:::\n:::\n\n\nFor more information on colors available, look [here](http://sape.inf.usi.ch/quick-reference/ggplot2/colour).\n\nWe can also color points based on another (usually categorical) variable:\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot disease by color\nggplot(smoke_complete) +\n  geom_point(aes(x = age_at_diagnosis, y = cigarettes_per_day, \n                 color = disease), \n             alpha = 0.1)\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/var_color-1.png){width=672}\n:::\n:::\n\nNote the location of `color=` with the other aesthetics,\nas well as the lack of quotation marks around `disease`.\n\nColoring by a variable automatically adds a legend as well.\n\nWe can also change the general appearance of the plot (background colors and fonts):\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(smoke_complete) +\n  geom_point(aes(x = age_at_diagnosis, y = cigarettes_per_day, color = disease), alpha = 0.1) +\n  theme_bw() # change background theme\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/theme-1.png){width=672}\n:::\n:::\n\n\nThis adds another layer to our plot representing a black and white theme.\nA complete list of pre-set themes is available [here](https://ggplot2.tidyverse.org/reference/ggtheme.html), \nand we'll cover ways to customize our own themes later in this lesson.\n\nWhile the axes are currently sufficient, \nthey aren't particularly attractive.\nWe can add a title and replace the axis labels using `labs`:\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(smoke_complete) +\n  geom_point(aes(x = age_at_diagnosis, y = cigarettes_per_day, color = disease), alpha = 0.1) +\n  labs(title = \"Age at diagnosis vs cigarettes per day\", # title\n       x=\"age (days)\", # x axis label\n       y=\"cigarettes per day\") +# y axis label\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/title-1.png){width=672}\n:::\n:::\n\n\nAnother common feature to customize involves the orientation and appearance of fonts.\nWhile this can be controlled by default themes like `theme_bw)`, \nyou can also control different parts independently. \nFor example, we can make a dramatic modification to all text in the plot:\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(smoke_complete) +\n  geom_point(aes(x = age_at_diagnosis, y = cigarettes_per_day, color = disease)) +\n  theme(text = element_text(size = 16)) # increase all font size\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/text-1.png){width=672}\n:::\n:::\n\n\nAlternatively, you can alter only one specific type of text:\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(smoke_complete) +\n  geom_point(aes(x = age_at_diagnosis, y = cigarettes_per_day, color = disease)) +\n  theme(axis.text.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5)) # rotate and adjust x axis text\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/x_text-1.png){width=672}\n:::\n:::\n\nThis rotates and adjusts the horizontal and vertical arrangement of the labels on only the x axis.\nOf course, you can also modify other text (y axis, axis labels, legend).\n\nAfter you're satisfied with a plot, \nit's likely you'd want to share it with other people or include in a manuscript or report.\n\n::: {.cell}\n\n```{.r .cell-code}\n# create directory for output\ndir.create(\"figures\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# save plot to file\nggsave(\"figures/awesomePlot.jpg\", width = 10, height = 10, dpi = 300)\n```\n:::\n\n\nThis automatically saves the last plot for which code was executed. \nYou can view your `figures/` directory to see the exported jpeg file.\nThis command interprets the file format for export using the file suffix you specify. The other arguments dictate the size (`width` and `height`) and resolution (`dpi`).\n\n> #### Challenge-scatterplot\n> Create a scatterplot showing age at diagnosis vs years smoked\n> with points colored by gender and appropriate axis labels.\n\n## Box and whisker plots\n\nBox and whisker plots compare the distribution of a quantitative variable among categories.\n\n::: {.cell}\n\n```{.r .cell-code}\n# creating a box and whisker plot\nggplot(smoke_complete) +\n  geom_boxplot(aes(x = vital_status, y = cigarettes_per_day))\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/box-1.png){width=672}\n:::\n:::\n\n\nThe main differences from the scatterplots we created earlier are the `geom` type and the variables plotted.\n\nWe can change the color similarly to scatterplots:\n\n::: {.cell}\n\n```{.r .cell-code}\n# adding color\nggplot(smoke_complete) +\n  geom_boxplot(aes(x = vital_status, y = cigarettes_per_day), color = \"tomato\")\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/box_color-1.png){width=672}\n:::\n:::\n\n\nIt seems weird to change the color of the entire box, though. \nA better option would be to add colored points to a black box and whisker plot:\n\n::: {.cell}\n\n```{.r .cell-code}\n# adding colored points to black box and whisker plot\nggplot(smoke_complete) +\n  geom_boxplot(aes(x = vital_status, y = cigarettes_per_day)) +\n  geom_jitter(aes(x = vital_status, y = cigarettes_per_day), alpha = 0.3, color = \"blue\")\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/box_jitter-1.png){width=672}\n:::\n:::\n\n\nJitter references a method of randomly offsetting points slightly to allow them to be seen and interpreted more easily. \n\nThis method, however, effectively duplicates some data points, since all points are shown with jitter and the boxplot shows outliers. You can use an option in `geom_boxplot` to suppress plotting of outliers:\n\n::: {.cell}\n\n```{.r .cell-code}\n# boxplot with both boxes and points\nggplot(smoke_complete) +\n  geom_boxplot(aes(x = vital_status, y = cigarettes_per_day), outlier.shape = NA) +\n  geom_jitter(aes(x = vital_status, y = cigarettes_per_day), alpha = 0.3, color = \"blue\")\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/box_outlier-1.png){width=672}\n:::\n:::\n\n\n> #### Challenge-comments\n> Write code comments for each of the following lines of code. \n> What is the advantage of writing code like this? \n\n::: {.cell}\n\n```{.r .cell-code}\nmy_plot <- ggplot(smoke_complete, aes(x = vital_status, y = cigarettes_per_day)) \nmy_plot +\n  geom_boxplot(outlier.shape = NA) +\n  geom_jitter(alpha = 0.2, color = \"purple\")\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/comments-1.png){width=672}\n:::\n:::\n\n\n> #### Challenge-order\n> Does the order of layers in the last plot matter?\n> What happens if `jitter` is coded before `boxplot`? \n\n## Time series data as line plots\n\nSo far we've been able to work with the data as it appears in our filtered dataset.\nNow that we're moving on to time series plots (changes in variables over time),\nwe need to manipulate the data.\nWe'll also be working with the `birth_reduced` dataset,\nwhich we created last class (primarily by removing all missing data for year of birth).\nWe'd like to plot the number of individuals in the dataset born by year,\nso we need to first count our observations based on both disease and year of birth:\n\n::: {.cell}\n\n```{.r .cell-code}\n# count number of observations for each disease by year of birth\nyearly_counts <- birth_reduced %>%\n  count(year_of_birth, disease) \n```\n:::\n\n\nWe can plot these data as a single line:\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot all counts by year\nggplot(yearly_counts) +\n  geom_line(aes(x = year_of_birth, y = n))\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/time_plot-1.png){width=672}\n:::\n:::\n\n\nHere, `n` represents the number of patients born in each year,\nfrom the count table created above.\nThe result isn't very satisfying, because we also grouped by disease.\nWe can improve this by plotting each disease on a separate line, \nwhich is more appropriate when there are multiple data points per year:\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot one line per cancer type\nggplot(yearly_counts) +\n  geom_line(aes(x = year_of_birth, y = n, \n                group = disease))\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/time_disease-1.png){width=672}\n:::\n:::\n\n\nMoreover, we can color each line individually:\n\n::: {.cell}\n\n```{.r .cell-code}\n# color each line per cancer type\nggplot(yearly_counts) +\n  geom_line(aes(x = year_of_birth, y = n, color = disease))\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/time_color-1.png){width=672}\n:::\n:::\n\n\nNote that you don't have to include a separate argument for `group = disease` because grouping is assumed by `color = disease`.\n\n> #### Challenge-line\n> Create a line plot for year of birth and number of patients with lines representing each gender.\n> Hint: you'll need to manipulate the `birth_reduced` dataset first. \n\n> #### Challenge-dash\n> How do you show differences in lines using dashes/dots instead of color?\n\n## Faceting \n\nSo far we've been working on building single plots,\nwhich can show us two main variables (for the x and y axes)\nand additional variables using color (and potentially size/shape/etc).\nScientific visualizations often need to compare among categories \n(e.g., control vs various treatments),\nwhich is generally clearer if those categories are presented in separate panels.\nggplot provides this capacity through faceting.\n\nLet's revisit the scatterplot we initially created,\nplotting age at diagnosis by cigarettes per day,\nwith points colored by disease.\nWe add an additional layer to create facets, or separate panels,\nfor a given variable \n(in this case, the same variable being used to color points):\n\n::: {.cell}\n\n```{.r .cell-code}\n# use previous scatterplot, but separate panels by disease\nggplot(smoke_complete) +\n  geom_point(aes(x = age_at_diagnosis, y = cigarettes_per_day, color = disease)) +\n  facet_wrap(vars(disease)) # wraps panels to make a square/rectangular plot\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/facet-1.png){width=672}\n:::\n:::\n\n\n`vars` is used for faceting in the same way that `aes()` is used for mapping:\nit is used to specify the variable to form facet groups.\n\n`facet_wrap` determines how many rows and columns of panels are needed to create the most square-shaped final plot possible.\nThis becomes useful when there are many more categories:\n\n::: {.cell}\n\n```{.r .cell-code}\n# add a variable by leaving color but changing panels to other categorical data\nggplot(smoke_complete) +\n  geom_point(aes(x = age_at_diagnosis, y = cigarettes_per_day, color = disease)) +\n  facet_wrap(vars(tumor_stage))\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/facet_wrap-1.png){width=672}\n:::\n:::\n\n\nIn this case, we're now visualizing an additional variable (tumor stage), \nin addition to the original three (age at diagnosis, cigarettes per day, and disease).\n\nIf you want to control the specific layout of panels, you can use `facet_grid` instead of `facet_wrap`:\n\n::: {.cell}\n\n```{.r .cell-code}\n# scatterplots with panels for vital status in one row\nggplot(smoke_complete) +\n  geom_point(aes(x = age_at_diagnosis, y = cigarettes_per_day, color = disease)) +\n  facet_grid(rows = vars(vital_status)) \n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/facet_grid-1.png){width=672}\n:::\n:::\n\n\nThis method can also plot panels in columns.\n\nWe may want to show interactions between two categorical variables,\nby arranging panels into rows according to one variable and columns according to another:\n\n::: {.cell}\n\n```{.r .cell-code}\n# add another variable using faceting\nggplot(smoke_complete) +\n  geom_point(aes(x = age_at_diagnosis, y = cigarettes_per_day, color = disease)) +\n  facet_grid(rows = vars(vital_status), cols = vars(disease)) # arrange plots via variables in rows, columns\n```\n\n::: {.cell-output-display}\n![](4_data_visualisation_files/figure-html/facet_both-1.png){width=672}\n:::\n:::\n\n\nDon't forget to look at the help documentation (e.g., `?facet_grid`) to learn more about additional ways to customize your plots!\n\n> #### Challenge-panels\n> Alter your last challenge plot of (birth year by number of patients) to show each gender in separate panels.\n\n> #### Challenge-axis\n> How do you change axis formatting, like tick marks and lines?\n> Hint: You may want to use Google!\n\n## Wrapping up\n\nThis material introduced you to ggplot as a tool for data visualization, \nallowing you to now create publication-quality images using R code.\nCombined with our previous explorations of the basic principles of R syntax, \nimporting and extracting data with base R,\nand manipulating data using tidyverse, \nyou should be equipped to continue learning about R on your own and developing code to meet your research needs. \n\nIf you are interested in learning more about ggplot:\n- Documentation for all `ggplot` features is available [here](https://ggplot2.tidyverse.org).\n- RStudio also publishes a [ggplot cheat sheet](https://github.com/rstudio/cheatsheets/raw/master/data-visualization-2.1.pdf) that is really handy!\n\n\n## Extra exercises\n\n\n#### Challenge-improve\nImprove one of the plots previously created today, by changing thickness of lines, \nname of legend, or color palette [http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/](http://www.cookbook-r.com/Graphs/Colors_(ggplot2)/)",
    "supporting": [
      "4_data_visualisation_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}