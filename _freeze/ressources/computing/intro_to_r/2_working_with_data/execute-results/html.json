{
  "hash": "137bdc2b5653ace8f3e1bc0e9393363f",
  "result": {
    "markdown": "---\ntitle:  \"Working with data\"\nsubtitle: \"Introduction to R: Class 2\"\ndescription: \"Data types and structures; slicing and subsetting data\"\n---\n\n\n\n## Objectives\n\nIn the last section, \nwe learned some fundamental principles of R and how to work in RStudio.\n\nIn this session,\nwe'll continue our introduction to R by working with a large dataset \nthat more closely resembles that which you may encounter while analyzing data for research. \nBy the end of this session, you should be able to:\n\n- import spreadsheet-style data into R as a data frame\n- extract portions of data from a data frame\n- manipulate factors (categorical data)\n\n## Importing spreadsheet-style data into R\n\nOpen RStudio, and we'll check to make sure you're ready to start work again.\nYou can check to see if you're working in your project directory \nby looking at the top of the Console. \nYou should see the path (location in your computer)\nfor the project directory you created last time \n(e.g., `~/Desktop/intro_r`).\n\nIf you do not see the path to your project directory,\ngo to `File -> Open Project` and navigate to the location of your project directory.\nAlternatively, using your operating system's file browser,\ndouble click on the `r_intro.Rrpoj` file.\n\nCreate a new R script (`File -> New File -> R Script`)\nand save it in your project directory with the name `class2.R`.\nPlace the following comment on the top line as a title:\n\n`# Introduction to R: Class 2`\n\nIn the last session, we recommended organizing your work in \ndirectories (folders) according to projects.\nWhile a thorough discussion of project organization is beyond the scope of this class,\nwe will continue to model best practices by creating a directory to hold our data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# make a directory\ndir.create(\"data\")\n```\n:::\n\n\n\n\nYou should see the new directory appear in your project directory, \nin the lower right panel in RStudio. \nThere is also a button in that panel you can use to create a new folder,\nbut including the code to perform this task makes other people \n(and yourself) able to reproduce your work more easily.\n\nNow that we have a place to store our data,\nwe can go ahead and download the dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# download data from url\ndownload.file(\"https://raw.githubusercontent.com/fredhutchio/R_intro/master/extra/clinical.csv\", \"data/clinical.csv\")\n```\n:::\n\n\nThe code above has two arguments, \nboth encompassed in quotation marks:\nfirst, you indicate where the data can be found online. \nSecond, you indicate where R should store a copy of the file on your own computer.\n\nThe output from that command may look alarming,\nbut it represents information confirming it worked.\nYou can click on the `data` folder to ensure the file is now present.\n\nNotice that the URL above ends in `clinical.csv`,\nwhich is also the name we used to save the file on our computers.\nIf you click on the URL and view it in a web browser, \nthe format isn't particularly easy for us to understand.\nYou can also view the file by clicking on it in the lower right hand panel,\nthen selecting \"View File.\"\n\n> The option to \"Import Dataset\" you see after clicking on the file \n> references some additional tools present in RStudio \n> that can assist with various kinds of data import.\n> Because this requires installing additional software, \n> complete exploration of these options is outside the scop of this class.\n> For more information, check out [this article](https://support.rstudio.com/hc/en-us/articles/218611977-Importing-Data-with-RStudio).\n\nThe data we've downloaded are in csv format, \nwhich stands for \"comma separated values.\"\nThis means the data are organized into rows and columns,\nwith columns separated by commas.\n\nThese data are arranged in a tidy format,\nmeaning each row represents an observation, \nand each column represents a variable (piece of data for each observation).\nMoreover, only one piece of data is entered in each cell. \n\nNow that the data are downloaded, \nwe can import the data and assign to an object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# import data and assign to object\nclinical <- read.csv(\"data/clinical.csv\")\n```\n:::\n\n\nYou should see `clinical` appear in the Environment window on the upper right panel in RStudio.\nIf you click on `clinical` there,\na new tab will appear next to your R script in the Source window.\n\n> Clicking on the name of an object in the Environment window \n> is a shortcut for running `View(clinical)`;\n> you'll see this code appear in the Console after clicking.\n\nNow that we have the data imported and assigned to an object,\nwe can take some time to explore the data we'll be using for the rest of this course:\n\n- These data are clinical cancer data from the [National Cancer Institute's Genomic Data Commons](https://gdc.cancer.gov),\nspecifically from The Cancer Genome Atlas, or [TCGA](https://www.cancer.gov/about-nci/organization/ccg/research/structural-genomics/tcga).\n- Each row represents a patient, \nand each column represents information about demographics (race, age at diagnosis, etc) \nand disease (e.g., cancer type).\n- The data were downloaded and aggregated using an R script,\nwhich you can view in the [GitHub repository for this course](https://github.com/fredhutchio/R_intro/blob/master/extra/clinical_data.R).\n\nThe function we used to import the data is one of a family of commands used to import the data. \nCheck out the help documentation for `read.csv` for more options for importing data.\n\n> You can also import data directly into R using `read.csv`,\n> using `clinical <- read.csv(\"https://raw.githubusercontent.com/fredhutchio/R_intro/master/extra/clinical.csv\")`.\n> For these lessons, we model downloading and importing in two steps, \n> so you retain a copy of the data on your computer. \n> This reflects how you're likely to import your own data,\n> as well as recommended practice for retaining data used in an analysis (since data online may be updated).\n\n> #### Challenge-data\nDownload, inspect, and import the following data files. \nThe URL for each sample dataset is included along with a name to assign to the object.\n(Hint: you can use the same function as above,\nbut may need to update the `sep = ` parameter)\n- URL: https://raw.githubusercontent.com/fredhutchio/R_intro/master/extra/clinical.tsv, object name: `example1`\n- URL: https://raw.githubusercontent.com/fredhutchio/R_intro/master/extra/clinical.txt, object name: `example2`\n\nImporting data can be tricky and frustrating, \nHowever, if you can't get your data into R, \nyou can't do anything to analyze or visualize it.\nIt's worth understanding how to do it effectively to save you time and energy later.\n\n## Data frames \n\nNow that we have data imported and available,\nwe can start to inspect the data more closely. \n\nThese data have been interpreted by R to be a data frame,\nwhich is a data structure (way of organizing data) that is analogous to tabular or spreadsheet style data.\nBy definition, a data frame is a table made of vectors (columns) of all the same length.\nAs we learned in our last session,\na vector needs to include all of the same type of data (e.g., character, numeric).\nA data frame, however, \ncan include vectors (columns) of different data types.\n\nTo learn more about this data frame,\nwe'll first explore its dimensions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# assess size of data frame\ndim(clinical)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6832   20\n```\n:::\n:::\n\nThe output reflects the number of rows first (6832), \nthen the number of columns (20).\n\nWe can also preview the content by showing the first few rows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# preview first few rows\nhead(clinical) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  primary_diagnosis tumor_stage age_at_diagnosis vital_status morphology\n1             C34.1    stage ia            24477         dead     8070/3\n2             C34.1    stage ib            26615         dead     8070/3\n3             C34.3    stage ib            28171         dead     8070/3\n4             C34.1    stage ia            27154        alive     8083/3\n5             C34.3   stage iib            29827         dead     8070/3\n6             C34.1  stage iiia            23370        alive     8070/3\n  days_to_death state tissue_or_organ_of_origin days_to_birth\n1           371  live                     C34.1        -24477\n2           136  live                     C34.1        -26615\n3          2304  live                     C34.3        -28171\n4            NA  live                     C34.1        -27154\n5           146  live                     C34.3        -29827\n6            NA  live                     C34.1        -23370\n  site_of_resection_or_biopsy days_to_last_follow_up cigarettes_per_day\n1                       C34.1                     NA          10.958904\n2                       C34.1                     NA           2.191781\n3                       C34.3                   2099           1.643836\n4                       C34.1                   3747           1.095890\n5                       C34.3                     NA                 NA\n6                       C34.1                   3576           2.739726\n  years_smoked gender year_of_birth         race              ethnicity\n1           NA   male          1936        white not hispanic or latino\n2           NA   male          1931        asian not hispanic or latino\n3           NA female          1927        white not hispanic or latino\n4           NA   male          1930        white not hispanic or latino\n5           NA   male          1923 not reported           not reported\n6           NA female          1942 not reported           not reported\n  year_of_death bcr_patient_barcode disease\n1          2004        TCGA-18-3406    LUSC\n2          2003        TCGA-18-3407    LUSC\n3            NA        TCGA-18-3408    LUSC\n4            NA        TCGA-18-3409    LUSC\n5          2004        TCGA-18-3410    LUSC\n6            NA        TCGA-18-3411    LUSC\n```\n:::\n:::\n\n\nThe default number of rows shown is six.\nYou can specify a different number using the `n = ` parameter,\ndemonstrated below using `tail`, \nwhich shows the last few rows\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# show last three rows\ntail(clinical, n = 3) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     primary_diagnosis  tumor_stage age_at_diagnosis vital_status morphology\n6830             C54.1 not reported            27326         dead     8950/3\n6831             C54.1 not reported            24781        alive     8950/3\n6832             C54.1 not reported            20318        alive     8950/3\n     days_to_death state tissue_or_organ_of_origin days_to_birth\n6830           949  live                     C54.1        -27326\n6831            NA  live                     C54.1        -24781\n6832            NA  live                     C54.1        -20318\n     site_of_resection_or_biopsy days_to_last_follow_up cigarettes_per_day\n6830                       C54.1                     NA                 NA\n6831                       C54.1                    587                 NA\n6832                       C54.1                      0                 NA\n     years_smoked gender year_of_birth  race              ethnicity\n6830           NA female          1932 white not hispanic or latino\n6831           NA female          1945 white not hispanic or latino\n6832           NA female          1957 asian not hispanic or latino\n     year_of_death bcr_patient_barcode disease\n6830          2008        TCGA-NG-A4VW     UCS\n6831            NA        TCGA-QM-A5NM     UCS\n6832            NA        TCGA-QN-A5NN     UCS\n```\n:::\n:::\n\n\nWe often need to reference the names of columns,\nso it's useful to print only those to the screen:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# view column names\nnames(clinical) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"primary_diagnosis\"           \"tumor_stage\"                \n [3] \"age_at_diagnosis\"            \"vital_status\"               \n [5] \"morphology\"                  \"days_to_death\"              \n [7] \"state\"                       \"tissue_or_organ_of_origin\"  \n [9] \"days_to_birth\"               \"site_of_resection_or_biopsy\"\n[11] \"days_to_last_follow_up\"      \"cigarettes_per_day\"         \n[13] \"years_smoked\"                \"gender\"                     \n[15] \"year_of_birth\"               \"race\"                       \n[17] \"ethnicity\"                   \"year_of_death\"              \n[19] \"bcr_patient_barcode\"         \"disease\"                    \n```\n:::\n:::\n\n\nIt's also possible to view row names using`rownames(clinical)`,\nbut our data only possess numbers for row names so it's not very informative.\n\nAs we learned last time, \nwe can use `str` to provide a general overview of the object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# show overview of object\nstr(clinical) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t6832 obs. of  20 variables:\n $ primary_diagnosis          : chr  \"C34.1\" \"C34.1\" \"C34.3\" \"C34.1\" ...\n $ tumor_stage                : chr  \"stage ia\" \"stage ib\" \"stage ib\" \"stage ia\" ...\n $ age_at_diagnosis           : int  24477 26615 28171 27154 29827 23370 19025 26938 28430 30435 ...\n $ vital_status               : chr  \"dead\" \"dead\" \"dead\" \"alive\" ...\n $ morphology                 : chr  \"8070/3\" \"8070/3\" \"8070/3\" \"8083/3\" ...\n $ days_to_death              : int  371 136 2304 NA 146 NA 345 716 2803 973 ...\n $ state                      : chr  \"live\" \"live\" \"live\" \"live\" ...\n $ tissue_or_organ_of_origin  : chr  \"C34.1\" \"C34.1\" \"C34.3\" \"C34.1\" ...\n $ days_to_birth              : int  -24477 -26615 -28171 -27154 -29827 -23370 -19025 -26938 -28430 -30435 ...\n $ site_of_resection_or_biopsy: chr  \"C34.1\" \"C34.1\" \"C34.3\" \"C34.1\" ...\n $ days_to_last_follow_up     : int  NA NA 2099 3747 NA 3576 NA NA 1810 956 ...\n $ cigarettes_per_day         : num  10.96 2.19 1.64 1.1 NA ...\n $ years_smoked               : int  NA NA NA NA NA NA NA NA NA NA ...\n $ gender                     : chr  \"male\" \"male\" \"female\" \"male\" ...\n $ year_of_birth              : int  1936 1931 1927 1930 1923 1942 1953 1932 1929 1923 ...\n $ race                       : chr  \"white\" \"asian\" \"white\" \"white\" ...\n $ ethnicity                  : chr  \"not hispanic or latino\" \"not hispanic or latino\" \"not hispanic or latino\" \"not hispanic or latino\" ...\n $ year_of_death              : int  2004 2003 NA NA 2004 NA 2005 2006 NA NA ...\n $ bcr_patient_barcode        : chr  \"TCGA-18-3406\" \"TCGA-18-3407\" \"TCGA-18-3408\" \"TCGA-18-3409\" ...\n $ disease                    : chr  \"LUSC\" \"LUSC\" \"LUSC\" \"LUSC\" ...\n```\n:::\n:::\n\nThe output provided includes:\n\n- data structure: data frame\n- dimensions: 6832 rows and 20 columns\n- column-by-column information: each prefaced with a `$`, and includes the column name, data type (num, int, Factor)\n\n> Factors are how character data are interpreted by R in data frames.\n> We'll talk more about working with factors at the end of this lesson.\n\nFinally, we can also examine basic summary statistics for each column:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# provide summary statistics for each column\nsummary(clinical) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n primary_diagnosis  tumor_stage        age_at_diagnosis vital_status      \n Length:6832        Length:6832        Min.   : 3982    Length:6832       \n Class :character   Class :character   1st Qu.:19191    Class :character  \n Mode  :character   Mode  :character   Median :22842    Mode  :character  \n                                       Mean   :22320                      \n                                       3rd Qu.:26002                      \n                                       Max.   :32872                      \n                                       NA's   :114                        \n  morphology        days_to_death        state          \n Length:6832        Min.   :    0.0   Length:6832       \n Class :character   1st Qu.:  274.0   Class :character  \n Mode  :character   Median :  524.0   Mode  :character  \n                    Mean   :  878.2                     \n                    3rd Qu.: 1044.5                     \n                    Max.   :10870.0                     \n                    NA's   :4645                        \n tissue_or_organ_of_origin days_to_birth    site_of_resection_or_biopsy\n Length:6832               Min.   :-32872   Length:6832                \n Class :character          1st Qu.:-26002   Class :character           \n Mode  :character          Median :-22842   Mode  :character           \n                           Mean   :-22320                              \n                           3rd Qu.:-19191                              \n                           Max.   : -3982                              \n                           NA's   :114                                 \n days_to_last_follow_up cigarettes_per_day  years_smoked      gender         \n Min.   :  -64.0        Min.   : 0.008     Min.   : 8.00   Length:6832       \n 1st Qu.:  345.0        1st Qu.: 1.370     1st Qu.:30.75   Class :character  \n Median :  650.0        Median : 2.192     Median :40.00   Mode  :character  \n Mean   :  976.8        Mean   : 2.599     Mean   :39.96                     \n 3rd Qu.: 1259.0        3rd Qu.: 3.288     3rd Qu.:50.00                     \n Max.   :11252.0        Max.   :40.000     Max.   :63.00                     \n NA's   :1118           NA's   :5661       NA's   :6384                      \n year_of_birth      race            ethnicity         year_of_death \n Min.   :1902   Length:6832        Length:6832        Min.   :1990  \n 1st Qu.:1937   Class :character   Class :character   1st Qu.:2004  \n Median :1947   Mode  :character   Mode  :character   Median :2007  \n Mean   :1948                                         Mean   :2006  \n 3rd Qu.:1957                                         3rd Qu.:2010  \n Max.   :1993                                         Max.   :2014  \n NA's   :170                                          NA's   :5266  \n bcr_patient_barcode   disease         \n Length:6832         Length:6832       \n Class :character    Class :character  \n Mode  :character    Mode  :character  \n                                       \n                                       \n                                       \n                                       \n```\n:::\n:::\n\n\nFor numeric data (such as `year_of_death`),\nthis output includes common statistics like median and mean,\nas well as the number of rows (patients) with missing data (as `NA`).\nFor factors (character data, such as `disease`), \nyou're given a count of the number of times the top six most frequent factors (categories) \noccur in the data frame.\n\n## Subsetting data frames\n\nNow that our data are available for use, we can begin extracting relevant information from them.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract first column and assign to a variable\nfirst_column <- clinical[1]\n```\n:::\n\n\nAs discussed last time with vectors, \nthe square brackets (`[ ]`) are used to subset, \nor reference part of, \na data frame.\nYou can inspect the output object by clicking on it in the environment.\nIt contains all of the rows for only the first column.\n\nWhen a single number is included in the square brackets, \nR assumes you are referencing a column. \nWhen you include two numbers in square brackets separated by a comma,\nR assumes the **first number references the row** and the **second number references the column** you desire.\n\nThis means you can also reference the first column as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract first column\nfirst_column_again <- clinical[ , 1]\n```\n:::\n\n\nLeaving one field blank means you want the entire set in the output\n(in this case, all rows).\n\n> #### Challenge-extract\n> What is the difference in results between the last two lines of code?\n\nSimilarly, we can also extract only the first row across all columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract first row \nfirst_row <- clinical[1, ]\n```\n:::\n\n\nWe can also extract slices, or sections of rows and columns,\nsuch as a single cell:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract cell from first row of first column\nsingle_cell <- clinical[1,1]\n```\n:::\n\n\nTo extract a range of cells, \nwe use the same colon (`:`) syntax from last time:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract a range of cells, rows 1 to 3, second column\nrange_cells <- clinical[1:3, 2]\n```\n:::\n\n\nThis works for ranges of columns as well.\n\nWe can also exclude particular parts of the dataset using a minus sign:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# exclude first column\nexclude_col <- clinical[ , -1] \n```\n:::\n\n\nCombining what we know about R syntax,\nwe can also exclude a range of cells using the `c` function:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# exclude first 100 rows\nexclude_range <- clinical[-c(1:100), ] \n```\n:::\n\n\nSo far, we've been referencing parts of the dataset based on index position,\nor the number of row/column.\nBecause we have included column names in our dataset,\nwe can also reference columns using those names:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract column by name\nname_col1 <- clinical[\"tumor_stage\"]\nname_col2 <- clinical[ , \"tumor_stage\"]\n```\n:::\n\n\nNote the example above features quotation marks around the column name.\nWithout the quotation marks, \nR will assume we're attempting to reference an object.\n\nAs we discussed with subsetting based on index above,\nthe two objects created above differ in the data structure.\n`name_col1` is a data frame (with one column),\nwhile `name_col2` is a vector.\nAlthough this difference in the type of object may not matter for your analysis,\nit's useful to understand that there are multiple ways to accomplish a task,\neach of which may make particular code work more easily.\n\nThere are additional ways to extract columns,\nwhich use R specific for complex data objects,\nand may be useful to recognize as your R skills progress.\n\nThe first is to use double square brackets:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# double square brackets syntax\nname_col3 <- clinical[[\"tumor_stage\"]]\n```\n:::\n\n\nYou can think of this approach as digging deeply into a complex object \nto retrieve data.\n\nThe final approach is equivalent to the last example,\nbut can be considered a shortcut since it requires fewer keystrokes\n(no quotation marks, and only one symbol):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# dollar sign syntax\nname_col4 <- clinical$tumor_stage\n```\n:::\n\n\nBoth of the last two approaches above return vectors.\nFor more information about these different ways of accessing parts of a data frame,\nsee [this article](https://www.r-bloggers.com/r-accessors-explained/).\n\nThe following challenges all use the `clinical` object:\n\n> #### Challenge-days\n> Code as many different ways possible to extract the column `days_to_death`.\n\n> #### Challenge-rows\n> Extract the first 6 rows for only `age_at_diagnosis` and `days_to_death`.\n\n> #### Challenge-calculate\n> Calculate the range and mean for `cigarettes_per_day`.\n\n## Factors\n\n**Note:** This section was written with a previous version of R that automatically interprets\nall character data as factors\n(this is not true of more recent versions of R).\nTo execute the code in this section,\nplease first import your data again,\nusing the following modified command:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclinical <- read.csv(\"data/clinical.csv\", stringsAsFactors = TRUE)\n```\n:::\n\n\n\nThis section explores one of the trickier types of data you're likely to encounter:\nfactors, which are how R interprets categorical data.\n\nWhen we imported our dataset into R,\nthe `read.csv` function assumed that all the character data\nin our dataset are factors, or categories. \nFactors have predefined sets of values, called levels.\nWe can explore what this means by first creating a factor vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create vector with factor data\ntest_data <- factor(c(\"placebo\", \"test_drug\", \"placebo\", \"known_drug\"))\n# show factor\ntest_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] placebo    test_drug  placebo    known_drug\nLevels: known_drug placebo test_drug\n```\n:::\n:::\n\n\nThis vector includes four pieces of data \n(often referred to as items or elements),\nwhich are printed as output above.\nThe second line of the output shows information about the levels,\nor categories, of our vector.\nWe can also access this information separately,\nwhich is useful if the data (vector) has a large number of elements:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# show levels of factor\nlevels(test_data) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"known_drug\" \"placebo\"    \"test_drug\" \n```\n:::\n:::\n\n\nThe levels in this test dataset are currently listed in alphabetical order,\nwhich is the default presentation in R.\nThe order of factors dictates how they are presented in subsequent analyses,\nso there are definitely cases in which you may want the levels in a specific order. \nIn the case of `test_data`, \nwe may want to keep the two drug treatments together, \nwith placebo at the end:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# reorder factors to put placebo at end\ntest_data <- factor(test_data, levels = c(\"known_drug\", \"test_drug\", \"placebo\"))\n# show reordered\ntest_data\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] placebo    test_drug  placebo    known_drug\nLevels: known_drug test_drug placebo\n```\n:::\n:::\n\n\nThis doesn't change the data itself,\nbut does make it easier to manage the data later.\n\nAnother useful aspect of factors is that they are stored as integers with labels.\nThis means that you can easily convert them to numeric data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# converting factors to numeric\nas.numeric(test_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3 2 3 1\n```\n:::\n:::\n\n\nThis can be handy for some types of statistical analyses, \nand also illustrates the importance of ordering your levels appropriately.\n\nWe can apply this knowledge to our clinical dataset,\nby first observing how the data are presented when creating a basic plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# quick and dirty plot\nplot(clinical$race)\n```\n\n::: {.cell-output-display}\n![](2_working_with_data_files/figure-html/race-plot-1.png){width=672}\n:::\n:::\n\n\nThe labels as presented by default are not particularly readable, \nand also lack appropriate capitalization and formatting.\nWhile it is possible to modify only the plot labels,\nwe would have to do that for all of our subsequent analyses.\nIt is more efficient to modify the levels once:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# assign race data to new object \nrace <- clinical$race \nlevels(race)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"american indian or alaska native\"         \n[2] \"asian\"                                    \n[3] \"black or african american\"                \n[4] \"native hawaiian or other pacific islander\"\n[5] \"not reported\"                             \n[6] \"white\"                                    \n```\n:::\n:::\n\n\nBy assigning the data to a new object, \nwe can more easily perform manipulations without altering the original dataset.\n\nThe output above shows the current levels for race.\nWe can access each level using their position in this order,\ncombined with our knowledge of square brackets for subsetting:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(race)[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"american indian or alaska native\"\n```\n:::\n:::\n\n\nWe can modify them to improve their formatting by assigning a new level\n(name) of our choosing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# correct factor levels\nlevels(race)[1] <- \"Am Indian\"\nlevels(race)[2] <- \"Asian\" # capitalize asian\nlevels(race)[3] <- \"black\"\nlevels(race)[4] <- \"Pac Isl\"\nlevels(race)[5] <- \"unknown\"\n# show revised levels\nlevels(race) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Am Indian\" \"Asian\"     \"black\"     \"Pac Isl\"   \"unknown\"   \"white\"    \n```\n:::\n:::\n\n\nAlthough we're not doing so here, \nwe could also reorder the levels \n(as we did for `test_data`).\n\nOnce we are satisfied with the resulting levels,\nwe assign the modified factor back to the original dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# replace race in data frame\nclinical$race <- race\n# replot with corrected names\nplot(clinical$race)\n```\n\n::: {.cell-output-display}\n![](2_working_with_data_files/figure-html/better-race-plot-1.png){width=672}\n:::\n:::\n\n\nThis section was a very brief introduction to factors,\nand it's likely you'll need more information when working with categorical data of your own.\nA good place to start would be [this article](https://peerj.com/preprints/3163/),\nand exploring some of the tools in the tidyverse (which we'll discuss in the next lesson).\n\n> #### Challenge-not-reported\n> In your clinical dataset, \n> replace \"not reported\" in ethnicity with NA\n\n> #### Challenge-remove\n> What Google search helps you identify additional strategies for renaming missing data?\n\n## Optional: Creating a data frame by hand\n\nThis last section shows two different approaches to creating a data frame by hand\n(in other words, without importing the data from a spreadsheet).\nIt isn't particularly useful for most of your day-to-day work,\nand also not a method you want to use often,\nas this type of data entry can introduce errors.\nHowever, it's frequently used in online tutorials, \nwhich can be confusing,\nand also helps illustrate how data frames are composed.\n\nThe first approach is to create separate vectors (columns),\nand then join them together in a second step:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create individual vectors\ncancer <- c(\"lung\", \"prostate\", \"breast\")\nmetastasis <- c(\"yes\", \"no\", \"yes\")\ncases <- c(30, 50, 100)\n# combine vectors\nexample_df1 <- data.frame(cancer, metastasis, cases)\nstr(example_df1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t3 obs. of  3 variables:\n $ cancer    : chr  \"lung\" \"prostate\" \"breast\"\n $ metastasis: chr  \"yes\" \"no\" \"yes\"\n $ cases     : num  30 50 100\n```\n:::\n:::\n\n\nThe resulting data frame has column headers,\nidentified from the names of the vectors combined together.\n\nThe next way seems more complex,\nbut represents the code above combined into one step:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create vectors and combine into data frame simultaneously\nexample_df2 <- data.frame(cancer = c(\"lung\", \"prostate\", \"breast\"),\n                          metastasis = c(\"yes\", \"no\", \"yes\"),\n                          cases = c(30, 50, 100), stringsAsFactors = FALSE)\nstr(example_df2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t3 obs. of  3 variables:\n $ cancer    : chr  \"lung\" \"prostate\" \"breast\"\n $ metastasis: chr  \"yes\" \"no\" \"yes\"\n $ cases     : num  30 50 100\n```\n:::\n:::\n\n\nAs we learned above, \nfactors can be particularly difficult, \nso it's useful to know that you can use `stringsAsFactors = FALSE` \nto import such data as character instead.\n\n## Wrapping up\n\nIn this session, \nwe learned to import data into R from a csv file,\nlearned multiple ways to access parts of data frames, \nand manipulated factors.\n\nIn the next session, \nwe'll begin to explore a set of powerful, elegant data manipulation tools \nfor data cleaning, transforming, and summarizing,\nand we'll prepare some data to visualize in our final session.\n\n## Extra exercises\n\nThe following exercises all use the same `clinical` data from this class.\n\n#### Challenge-disease-race\nExtract the last 100 rows for only `disease` and `rac`e and save to an object called `disease_race`.\n\n#### Challenge-min-max\nCalculate the minimum and maximum for `days_to_death`.\n\n#### Challenge-factors\nChange all of the factors of race to shorter names for each category,\nand appropriately indicate missing data.\n",
    "supporting": [
      "2_working_with_data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}