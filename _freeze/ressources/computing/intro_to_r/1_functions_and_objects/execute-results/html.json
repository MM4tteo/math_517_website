{
  "hash": "6511aa024d8323069aca44811e70e3df",
  "result": {
    "markdown": "---\ntitle: \"Functions and objects\"\nsubtitle: \"Introduction to R: Class 1\"\ndescription: \"R syntax, assigning objects, using functions\"\n---\n\n\n\n## Objectives\n\nWelcome to Introduction to R from fredhutch.io!\nThis course introduces you R by working through common tasks in data science:\nimporting, manipulating, and visualizing data. \n\nR is a statistical and programming computer language widely used for a variety of applications.\n\nBefore proceeding with these training materials,\nplease ensure you have installed both R and RStudio as described [here](https://posit.co/download/rstudio-desktop/).\n\nBy the end of this session, you should be able to:\n\n- work within the RStudio interface to run and save R code in a project\n- understand basic R syntax to use functions and assign objects\n- create and manipulate vectors and understand how R deals with missing data \n\n## A brief orientation to RStudio \n\n[R](https://cran.r-project.org) is a statistical programming language,\nwhile [RStudio](https://posit.co/products/open-source/rstudio/) is an integrated development environment (IDE) \nthat allows you to code in R more easily.\nRStudio possesses many features that you may find useful in your work.\nWe'll highlight a few of the most common and useful parts for our introductory course.\n\nThe first time you open RStudio, \nyou'll see three panels, or windows.\n\n1. The panel on the left is the console, \nwhere you can run R code.\nThe text printed in this panel is basic information about R and the version you're running. \nYou can test how the console can be used to run code by entering `3 + 4` and then pressing enter.\nThis instructs your computer to read, interpret, and execute the command, \nthen print the result (`7`) to the Console,\nand show a right facing arrow (`>`), \nindicating it is ready to accept additional code.\n2. The panel on the top right is the environment. \nIt's empty right now, but we'll learn more about this later in this lesson.\n3. The panel on the lower right shows the files present in your working directory. \nCurrently, that's probably your `Home` directory, \nwhich includes folders like `Documents` and `Downloads`.\n\nYou may notice that some of the panels possess additional tabs.\nWe'll explore some of these features in this class,\nbut for more information:\n\n`Help -> Cheetsheets -> RStudio IDE cheat sheet`\n\nThis PDF includes an overview of each of the things you see in RStudio,\nas well as explanations of how you can use them.\nIt may be intimidating right now, \nbut will come in handy as you gain experience with R.\n\nOne of the ways that RStudio makes working in R easier is by allowing you to create R projects. \nYou can think of a project as a discrete unit of work,\nsuch as a chapter of a thesis/dissertation,\nanalysis for a manuscript, \nor a monthly report. \nWe recommend organizing your code, data, and other associated files as projects,\nwhich allows you to keep all parts of an analysis together for easier access.\n\nWe'll be creating a project to use for the duration of this course. \nCreate a new project in RStudio:\n\n- `File -> New Project`\n- Choose `New Directory`, then `New Project`\n- name your project `intro_r` and save it somewhere on your computer you'll be able to find easily later (we recommend your Desktop or Documents)\n- Click `Create project`\n\nAfter your RStudio screen reloads, \nnote two things:\n\n- The file browser in the lower right panel will now show the contents of a new folder, \n`intro_r`, that was created as a part of your RStudio project. \n- The console window will show the path, or location in your computer,\nfor your project directory. \nThis is important later in class,\nwhen this path will be required to locate data for analysis.\n\nNow we're ready to create a new R script:\n\n- `File -> New File -> R Script`\n- Save the new file as `class1.R`. \nBy default, RStudio will save this in your project directory.\n\nThis R script is a text file that we'll use to save code we learn in this class.\nWe'll refer to this window as the script or source window.\nRemember to save this file periodically to retain the record of the work you're doing,\nso you can re-execute the code later if necessary.\n\nBy convention, \na script should include a title at the top,\nso type the following on the first line:\n\n`# Introduction to R: Class 1`\n\n## Using functions\n\nNow that we have a project and new script set up, we're ready to begin adding code.\nSkipping a line after the title, \ntype the following on the next two lines:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# basic math\n4 + 5 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n:::\n\n\nThe first of the two boxes above represents the code you execute.\nThe second box (prefaced with `##`) shows the output you should expect.\nThe `[1]` in the second box means there is one item (in this case, `9`)\npresent in the output.\n\nThe first line in that example is a code comment.\nIt is not interpreted by R, \nbut is a human-readable explanation of the code that follows. \nThis is also how we included a title in our script.\nIn R, \nanything to the right of one or more `#` symbols represents a comment.\n\nThe code above is the same mathematical operation we executed earlier.\nIf we wanted to re-run this command, we have two options:\n\n1. Copy and paste the code into the Console\n2. Use the `Run` button at the top of the script window\n3. Use the keyboard shortcut: `Ctrl + Enter`\n\nThe third option is the most efficient, \nespecially as your coding skills progress.\nWith your cursor on the line with `4 + 5`, \nhold down the `Control` key and press `Enter`.\nYou'll see the code and answer both appear in the Console.\nA few things to note about this keyboard shortcut:\n\n- It doesn't matter where your cursor is on the line of code;\nthe entire line will be executed with the keyboard shortcut.\n- If there isn't code on the line where your cursor is located,\nRStudio will attempt to execute following lines. \n\nIn practice, a script should represent code you are developing in R,\nand you should only save the code that you know functions.\nFor this class, we'll be including notes about things we learn as comments.\n\n> `Ctrl + Enter` is the only keyboard shortcut we emphasize in this course, \n> but there are many others available. \n> You can view them on the second page of the cheat sheet linked above,\n> or by going to `Help -> Keyboard Shortcuts Help`.\n\nIf you were looking carefully, \nyou may have noticed that the `+` in the previous code example had spaces on either side, separating it from the numbers. \nYou may wonder whether spaces matter in how the code is interpreted. \nAs with many questions in coding, \nthe easiest way to assess whether removing the spaces matters is to simply try it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# same code as above, without spaces\n4+5\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 9\n```\n:::\n:::\n\n\nGiven the output, \nwe can conclude that spaces do not matter in how the code functions.\nIn this case, however,\nspaces represent a common convention in formatting R code,\nas it makes it easier for human eyes to read.\nIn general, \nyou should attempt to replicate the code presented here as closely as possible,\nand we'll do our best to note when something is required as opposed to convention.\n\n> Code convention and style doesn't make or break the ability of your code to run,\n> but it does affect whether other people can easily understand your code. \n> A brief overview of common code style is available [here](http://adv-r.had.co.nz/Style.html),\n> and more information is available in the [tidyverse style guide](https://style.tidyverse.org).\n\nSo far, we've used R with mathematical symbols representing operations. \nR possesses the ability to perform much more complex tasks using functions,\nwhich is a pre-defined set of code that allows you to repeat particular actions.\n\nR includes functions for other types of math:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# using a function: rounding numbers\nround(3.14)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n:::\n\n\nIn this case,\n`round` is the function, \nand `3.14` is the number (data) being manipulated by the funcion.\nA word followed by parentheses is a common format for functions in R.\n\n> Syntax refers to the rules that dictate how combinations of words and symbols are interpreted in a language (either programming or human).\n\nAdditional options for modifying functions are called arguments,\nand are included with the data between parentheses.\nFor the `round` function, \na common modification would be the number of decimal points output. \nYou can change this detail by adding a comma and then additional argument:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# using a function with more arguments\nround(3.14, digits = 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.1\n```\n:::\n:::\n\n\nIf you would like to learn more about how this function works, \nyou can go to the bottom righthand panel and click on the `Help` tab.\nEnter the name of a function into the search box and hit `Enter`.\nAlternatively, execute the following in your console:\n\n`?round`\n\nThis is a shortcut for performing the same task in the panel described above.\n\nR help documentation tends to be formatted very consistently. \nAt the very top, you'll see the name of the function.\nBelow that, \na short title indicates the purpose of the function, \nalong with a more verbose \"Description\". \n\"Usage\" tells you how to use the function in code, \nand \"Arguments\" details each of the optiond in \"Usage\".\nThe rest of the subheadings should be self-explanatory.\n\nIn the example above, there is no label associated with `3.14`.\nIn reality, `3.14` represents `x`, \nso the command can actually be written as `round(x = 3.14, digits = 1)`.\nEven if not explicitly stated,\nthe computer assumes that `3.14` represents `x` if the number is the first thing that appears after the opening parenthesis. \n\nIf you define both arguments explicitly, you can switch the order in which they appear: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# can switch order of arguments\nround(digits = 1, x = 3.14)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.1\n```\n:::\n:::\n\n\nIf you remove the labels (`round(1, 3.14)`), \nthe answer is different, \nbecause R is assuming you mean `round(x = 1, digits = 3.14)`.\n\n> You may notice that boxes pop up as you type. \n> These represent RStudio's attempts to guess what you're typing and share additional options.\n\n> #### Challenge-hist\n> What does the function `hist` do? \n> What are its main arguments? \n> How did you determine this?\n\n## Assigning objects\n\nSo far, we've been performing tasks with R that require us to input the data manually.\nOne of the strengths of using a programming language is the ability to assign data to objects, or variables. \n\n> Objects in R are referred to as variables in other programming languages. \n> We'll use these terms synonymously for this course, \n> though in other contexts there may be differences between them.\n> Please see the [R documentation on objects](https://cran.r-project.org/doc/manuals/r-release/R-lang.html#Objects) \n> for more information.\n\nLike in math, a variable is a word used to represent a value (in this case, a number):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# assigning value to an object\nweight_kg <- 55\n```\n:::\n\n\nIn the code above, \n`<-` is the assignment operator:\nit instructs R to recognize `weight_kg` as representing the value 55.\nYou can think of this code as referencing \"55 goes into weight_kg.\"\n\nAfter executing the code above,\nyou'll see the object appear in the Environment panel on the upper right hand side of the RStudio screen.\nThe name of the object will appear on the left, \nwith the value assigned to it on the right.\n\nThe name you assign to objects can be arbitrary,\nbut we recommend using names that are relatively short and meaningful \nin the context of the values they represent.\nIt's useful to also know other general limitations on object names:\n\n- case sensitive\n- cannot start with numbers\n- avoid other common words in R (e.g., function names, like `mean`)\n- avoid dots (underscores are a good alternative, such as the example above)\n\nExtra information on object names is available in the [tidyverse style guide](https://style.tidyverse.org/syntax.html#object-names).\n\nNow that the object has been assigned,\nwe can reference that object by executing its name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# recall object\nweight_kg\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 55\n```\n:::\n:::\n\n\nThus, the value `weight_kg` represents is printed to the Console.\n\nWe can also perform operations on an object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# multiple an object (convert kg to lb)\n2.2 * weight_kg\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 121\n```\n:::\n:::\n\n\nIn that case, the answer is printed to the Console.\nYou can also assign the output to a new object:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# assign weight conversion to object\nweight_lb <- 2.2 * weight_kg\n```\n:::\n\n\nAfter executing that line of code,\nyou'll see `weight_lb` appear in the Environment panel, too.\n\nNow let's explore what happens if we assign a value to an existing object name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# reassign new value to an object\nweight_kg <- 100\n```\n:::\n\n\nNote that the value assigned to `weight_kg` as it appears in the Environment panel \nchanges after executing the code above.\n\nHas the value assigned to `weight_lb` also changed?\nYou might expect this would be the case,\nsince this value is derived from `weight_kg`.\nHowever, `weight_kg` remains the same as previously assigned.\nIf you want the value for `weight_kg` to reflect the new value for `weight_kg`,\nyou will need to again execute `weight_lb <- 2.2 * weight_kg`.\nThis should help you understand an important concept in writing code:\nthe order in which you execute lines of code matters!\nIn the context of the material we cover in this class,\nwe'll continue saving code in scripts so we have a record of both\nthe relevant commands and the appropriate order for execution.\n\n> You can think of the names of objects like sticky notes.\n> You have the option to place the sticky note (name) on any value you choose.\n> You can pick up the sticky note and place it on another value,\n> but you need to explicitly tell R when you want values assigned to certain objects.\n\nAt this point in the lesson,\nit's common to have accidentally created an object with a typo in the name.\nIf this has happened to you, \nit's useful to know how to remove the object to keep your environment up to date.\nHere, we'll practice removing an object with something everyone has available:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove object\nremove(weight_lb) \n```\n:::\n\n\nThis removes the specified object from the environment,\nwhich you can confirm by its absence in the Environment panel.\nYou can also abbreviate this command to `rm(weight_lb)`.\n\n> You can clear the entire environment using the button at the top of the Environment panel\n> with a picture of a broom. \n> This may seem extreme, \n> but don't worry! \n> We can re-create all the work we've already done by executing each line of code again.\n\n> #### Challenge-values\n> For the code chunk below,\n> what is the value of each item at each step?\n\n::: {.cell}\n\n```{.r .cell-code}\nmass <- 47.5            # mass?\nwidth  <- 122             # width?\nmass <- mass * 2.0      # mass?\nwidth  <- width - 20        # width?\nmass_index <- mass/width  # mass_index?\n```\n:::\n\n\n## Vectors\n\nSo far, we've worked with objects containing a single value.\nFor most research purposes, however,\nit's more realistic to work with a collection of values.\nWe can do that in R by creating a vector with multiple values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# assign vector\nages <- c(50, 55, 60, 65) \n# recall vector\nages\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50 55 60 65\n```\n:::\n:::\n\n\nThe `c` function used above stands for \"combine,\"\nmeaning all of the values in parentheses after it are included in the object.\nThis is reflected in the Console, \nwhere recalling the value shows all four values,\nand the Environment window, \nwhere multiple values are shown on the right side.\n\nWe can use functions to ask basic questions about our vector, including:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# how many things are in object?\nlength(ages)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\n# what type of object?\nclass(ages)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"numeric\"\n```\n:::\n\n```{.r .cell-code}\n# get overview of object\nstr(ages)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n num [1:4] 50 55 60 65\n```\n:::\n:::\n\n\nIn the code above, \nwe learn that there are four items (values) in our vector, \nand that the vector is composed of numeric data.\n`str` stands for \"structure\",\nand shows us a general overview of the data,\nincluding a preview of the first few values \n(or all the values, as is the case in our small vector).\n\nEven more useful is the ability to use functions to perform more complex tasks for us,\nsuch as statistical summaries:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# performing functions with vectors\nmean(ages)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 57.5\n```\n:::\n\n```{.r .cell-code}\nrange(ages)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 50 65\n```\n:::\n:::\n\n\nAlthough we've focused on numbers as data so far, \nit's also possible for data to be words instead:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# vector of body parts\norgans <- c(\"lung\", \"prostate\", \"breast\")\n```\n:::\n\n\nIn this case,\neach word is encased in quotation marks,\nindicating these are character data,\nrather than object names.\n\n> #### Challenge-organs\n> Please answer the following questions about `organs`:\n> - How many values are in `organs`?\n> - What type of data is `organs`?\n> - How can you see an overview of `organs`?\n\nWe've seen data as numbers and letters so far.\nIn fact, R has all of the following basic data types:\n\n- **character**: sometimes referred to as string data, tend to be surrounded by quotes\n- **numeric**: real or decimal numbers, sometimes referred to as \"double\"\n- integer: a subset of numeric in which numbers are stored as integers\n- **logical**: Boolean data (TRUE and FALSE)\n- complex: complex numbers with real and imaginary parts (e.g., 1 + 4i)\n- raw: bytes of data (machine readable, but not human readable)\n\nThe three data types listed in **bold** above are the focus of this class.\nR automatically interprets the type as you enter data.\nMost data analysis activities will not require you to understand \nspecific details of the other data types.\n\n> #### Challenge-dtypes\n> R tends to handle interpreting data types in the background of most operations.\n> The following code is designed to cause some unexpected results in R.\n> What is unusual about each of the following objects?\n\n::: {.cell}\n\n```{.r .cell-code}\nnum_char <- c(1, 2, 3, \"a\")\nnum_logical <- c(1, 2, 3, TRUE)\nchar_logical <- c(\"a\", \"b\", \"c\", TRUE)\ntricky <- c(1, 2, 3, \"4\")\n```\n:::\n\n\n## Manipulating vectors\n\nIn the section above,\nwe learned to create and assess vectors,\nand use functions to calculate statistics across the values.\nWe can also modify a vector after it's been created:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add a value to end of vector\nages <- c(ages, 90) \n```\n:::\n\n\nThe example above uses the same combine (`c`) function as when we initially created the vector.\nWe can also use it to add values to the beginning of the vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add value at the beginning\nages <- c(30, ages)\n```\n:::\n\n\nIf we wanted to extract, or subset,\na portion of a vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extracting second value\norgans[2] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"prostate\"\n```\n:::\n:::\n\n\nIn general, square brackets (`[ ]`) in R refer to a part of an object.\nThe number 2 indicates the second value in the vector.\n\n> The index position of a value is the number associated with its location in a collection.\n> In the example above, note that R indexes (or counts) starting with 1.\n> This is different from many other programming languages, \n> like Python, which use 0-based indexing.\n\nIn R, a minus sign (`-`) can be used to negate a value's position,\nwhich excludes that value from the output:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# excluding second value\norgans[-2] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"lung\"   \"breast\"\n```\n:::\n:::\n\n\nYou may be tempted to try extracting multiple values at a time\nby separating the numbers with commas (e.g., `organs[2,3]`).\nThis will result in a rather cryptic error,\nwhich we'll talk more about next time. \nFor now, \nremember that you can use the combine function to indicate multiple values for subsetting:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extracting first and third values\norgans[c(1, 3)] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"lung\"   \"breast\"\n```\n:::\n:::\n\n\nWe'll switch back to our numerical `ages` object to explore another common need when subsetting:\nextracting values based on a condition (or criteria). \nFor numerical data,\nwe're often interested in extracting data that are in a certain range of values.\nIt is tempting to try something like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nages > 60 \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE FALSE  TRUE  TRUE\n```\n:::\n:::\n\n\nThe result, however, is less than satisfying:\nyou receive either TRUE or FALSE for each data point,\ndepending on whether it meets the condition or not.\n\nWhile that information isn't quite what we expected, \nwe can combine it with the subsetting syntax we learned earlier:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extracts values which meet condition\nages[ages > 60] \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 65 90\n```\n:::\n:::\n\n\nIf we read the code above from the inside out \n(a common strategy for R),\nthe code above identifies which values meet the criteria,\nand the square brackets are used to extract this from the original vector.\n\nIf you want to extract items exactly equal to a specific value,\nyou need to use two equal signs:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extracts values numerically equivalent values\nages[ages == 60]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 60\n```\n:::\n:::\n\n\nYou can think of this as a way to differentiate mathematical equivalency\nfrom specification of parameters for arguments \n(such as `digits = 1` for `round()`, as we learned earlier).\nR also allows you to use <= and >=.\n\nFinally, \nit's common to need to combine conditions while subsetting.\nFor example, you may be interested in only values between 50 and 60:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ages less than 50 OR greater than 60\nages[ages < 50 | ages > 60]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 30 65 90\n```\n:::\n:::\n\n\nIn the code above, the vertical pipe `|` is interpreted to mean \"or,\"\nso each data point can belong to either the category on the left of the pipe, \nthe category on the right, or both.\nIn other words, the vertical pipe means any single value being evaluated \nmust meet one or both conditions.\n\nYou can also combine conditions with `&`,\nbut this means any single value must meet **both** conditions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# ages greater than 50 OR less than 60\nages[ages > 50 & ages < 60]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 55\n```\n:::\n:::\n\n\n> Be careful when thinking about human language as opposed to programming languges.\n> When speaking, \n> we is reasonable to say \"extract all values below 50 and above 60.\"\n> While this makes sense in context,\n> it is mathematically impossible for a value to be both less than 50 AND greater than 60.\n\n> #### Challenge-compare\n> Why does the following code return the answer it\n\n\n::: {.cell}\n\n```{.r .cell-code}\n\"four\" > \"five\"\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Missing data\n\nMost of the data we encounter has missing data.\nProgramming languages interpret and handle missing data in different ways,\nso it's worth taking time to dig into how R approaches this issue.\n\nFirst, we'll create a new vector some values indicated as missing data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a vector with missing data\nheights <- c(2, 4, 4, NA, 6)\n```\n:::\n\n\nIn the vector above, `NA` represents a value where data are missing. \nYou may notice `NA` is not encased in quotation marks.\nThis is because R interprets that set of characters specifically as missing data.\n\nNext, let's investigate how this vector responds to use in functions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# calculate mean and max on vector with missing data\nmean(heights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n\n```{.r .cell-code}\nmax(heights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] NA\n```\n:::\n:::\n\n\nThe answer isn't very satisfying;\nwe're told the answer is missing data because of\nthe presence of a single missing value in the vector.\nThis is a slightly frustrating default behavior for some common statistical functions in R,\nbut we can add an argument to ignore missing data and calculate across the remaining values:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# add argument to remove NA\nmean(heights, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nmax(heights, na.rm = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n:::\n\n\nIn the code above, \nthe `na.rm` parameter controls whether missing data are removed.\nThe default (which you can also reference in the help documentation)\nis for missing values to be included (`na.rm = FALSE`). \nBy switching to `na.rm = TRUE`,\nwe're instructing R to remove missing data.\n\nThe example above retains missing values in the dataset while performing calculations.\nThere are certainly cases in which you may want \nto specifically filter out the missing data from your dataset.\n\nThe function `is.na` allows you to ask whether elements in a dataset are missing:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# identify elements which are missing data\nis.na(heights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] FALSE FALSE FALSE  TRUE FALSE\n```\n:::\n:::\n\n\nIf a resulting value is `TRUE`, \nthe value is missing.\nIf `FALSE`, the data point is present.\nWe can invert the resulting logical data using an exclamation point:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# reverse the TRUE/FALSE\n!is.na(heights)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  TRUE  TRUE  TRUE FALSE  TRUE\n```\n:::\n:::\n\n\nThis means missing data are now listed as `FALSE`,\nwith data present as `TRUE`.\n\nAs with the conditional statements we learned earlier, \nwe can combine these results with our square bracket subsetting syntax \nto extract only values that are present in the dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# extract elements which are not missing values\nheights[!is.na(heights)]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 4 4 6\n```\n:::\n:::\n\n\nAlternatively, you can use a function specifically designed for excluding (omitting) missing data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# remove incomplete cases\nna.omit(heights) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2 4 4 6\nattr(,\"na.action\")\n[1] 4\nattr(,\"class\")\n[1] \"omit\"\n```\n:::\n:::\n\n\nYou may notice that this output looks slightly different than the previous example. \nThis is because `na.omit` includes output about attributes, \nor information about the data.\nThe output vectors are the same for the last two code examples,\neven though the way they appear in the Console seems different.\n\n> If you aren't sure how to interpret the output in your console, \n> sometimes it helps to assign the output to an object. \n> You can then inspect the data type, structure, etc \n> to ensure you're getting the answer you expected.\n\n> #### Challenge-analyze\nComplete the following tasks after executing the code chunk below. \n(Note: there are multiple solutions):\n> - Remove NAs \n> - Calculate the median\n> - Identify how many elements in the vector are greater than 67 inches\n> - Visualize the data as a histogram (hint: function `hist`)\n\n::: {.cell}\n\n```{.r .cell-code}\n# create vector\nmore_heights <- c(63, 69, 60, 65, NA, 68, 61, 70, 61, 59, 64, 69, 63, 63, NA, 72, 65, 64, 70, 63, 65)\n```\n:::\n\n\n## Wrapping up\n\nIn this session, \nwe spent some time getting to know the RStudio interface for writing and running R code,\nexplored the basic principles of R syntax for functions and object assignment, \nand worked with vectors to understand how R handles missing data.\n\nIn the next session, \nwe'll learn to import spreadsheet-style data that are more similar to what you'd like handle for a research project, \nand practice accessing different portions of the data.\n\n**When you are done working in RStudio,** \nyou should save any changes to your R script.\nWhen you close RStudio, \nyou will see a pop-up box asking if you want to save your workspace image.\nWe do not recommend saving your project in this way,\nas it creates extra (hidden) files on your computer\nthat can be unwieldy in size and inadvertently retain sensitive data \n(if you're working with PHI or other private data).\nIf you've saved your R script, \nyou can recreate all the work you've accomplished.\nFor more information on this topic, \nplease review [this explanation](https://www.stat.ubc.ca/~jenny/STAT545A/block01_basicsWorkspaceWorkingDirProject.html#workspace-.rdata).\nIf you would like to prevent this box from popping up in the future,\nwe recommend:\n\n- Go to `Tools -> Global Options` \n(Global means for all projects; \nyou can also change this for each project using `Project Options`)\n- In the drop-down menu next to `Save workspace to ~/.Rdata on exit`\nselect `Never`.\n\n**If you need to reopen your project after closing RStudio,**\nyou should use the `File -> Open Project` and navigate to the location of your project directory.\nAlternatively, using your operating system's file browser,\ndouble click on the `r_intro.Rrpoj` file.\n\n\n## Extra exercises\n\n#### Challenge-objects\n- Create an object called agge that contains your age in years\n- Reassign the object to a new object called age (e.g., correct the typo)\n- Remove the previous object from your environment\n- Calculate your age in days\n\n#### Challenge-char\nThe following vector represents the number of vacation days possessed by various employees:\n\n::: {.cell}\n\n```{.r .cell-code}\nvacation_days <- c(5, 7, 20, 1, 0, 0, 12, 4, 2, 2, 2, 4, 5, 6, 7, 10, 4)\n```\n:::\n\n- How many employees are represented in the vector?\n- How many employees have at least one work week's worth of vacation available to them?",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}