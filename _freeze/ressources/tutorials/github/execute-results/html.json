{
  "hash": "56374c394e2080304817dc09a4b73624",
  "result": {
    "markdown": "---\ntitle: \"How to set-up GitHub from RStudio\"\noutput:\n  html_document:\n    toc: true\n---\n\n\n\n\n\n::: callout-important \n\nPlease read the full guide if something does not work: it is very likely that the answer to your problem lies just a few lines after wherever you stopped reading.\n:::\n\nFollow [this tutorial](https://docs.github.com/en/get-started/quickstart/hello-world)\n\n# Installing R and RStudio\n\nGo to [r-project.org](r-project.org) and download R. You have to choose a mirror (Switzerland). Install from the .exe file, choose English as the default language in the process.\n\nGo to [posit.co](https://posit.co) and download the RStudio IDE. Choose RStudio Desktop free version and make sure the correct operating system was selected. Install RStudio from the downloaded executable. Open RStudio.\n\n*Note*: R(Studio) has this great functionality that is missing in Matlab, for instance: it can run selection or just the current line (where the cursor is) when nothing is selected. By default, the shortcut is Ctrl+Enter on Windows, but I recommend you to go in RStudio to Tools -> Modify Keyboard Shortcuts and change the \"Run Current Line or Selection\" to Ctrl+R, which was the default\nshortcut until a couple of years ago, and I prefer it since it requires one hand only. I also recommend going to Tools -> Global Options -> Appearance to customize it. A dark color theme can be selected there, as well as a proper combination of zoom and font size (I frequently change the Zoom depending on the screen I am working with).\n\n# Installing Git\n\nDownload an appropriate installer from [git-scm.org](git-scm.org) and go through the\ninstallation process. If you are not sure how useful Git will be to you, it is advisable to uncheck Windows Explorer Integration (or similar for other operating system) on the second screen. Otherwise use the default setup, but make sure that you allow to use\n\"Git from the command line and also from 3rd-party software\".\n\n# Creating a GitHub account\n\n## Sign in \n\nGo to [github.org](github.org) and sign up. After providing your e-mail, choosing\na password and your GitHub name, and verifying your e-mail, choose that you will be\nworking with 2-5 people and that you are a student. Skip the next option, and\nthen just choose a free account.\n\nNow you are on GitHub and your account is empty (there is no repo yet). That is\nalright, keep the tab open, we will return to it in a bit.\n\n## SSH keys\n\nIn order to interact with the git repository, we need to link a SSH key that will identify you (see it as a complicated password that you won't have to type). In the past it was possible to not \nuse a SSH key but github does not allow it anymore.\n\nWe present 2 options to create/add a SSH key to your github account. If it does not work out of the box, please refer to [this link]( https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent) before panicking.\n\n**CLI**: \n\nThis will require you to use the terminal (recommended). You can access the terminal in RStudio by going to Tools → Terminal → Move focus to terminal. \n\nCheck [this github tutorial]( https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent) and follow the steps. Make sure to pick the correct option for your operating system (Mac, Windows, Linux). \n\n**GUI with RStudio**\n\nFirstly, check whether you already have an SSH key by running\n\n::: {.cell}\n\n```{.r .cell-code}\nfile.exists(\"~/.ssh/id_rsa.pub\")\n```\n:::\n\nin RStudio console.\n\n\nIf that returns FALSE, go to Tools -> Global Options -> Git/SVN. (Maybe there is already an SSH key address, just in a different location, so try running `file.exists` with the correct location, if you see one. If you don't see any SSH key location...) Make sure\nthe Git executable is available. Click \"Create RSA Key\" and click \"Create\" again.\nIf you get \"Access Denied\" error, restart RStudio, this time as as an administrator.\nClose the pop-up, click \"Apply\". Still in the Git/SVN tab in Global Options, click\n\"View public key\". A pop-up with a long string will appear. Keep this open.\n\nGo to https://github.com/settings/ssh and click \"New SSH Key\". Put e.g. \"Rstudio\"\nin the Title box, and copy the long string (from the tab opened in RStudio in the\nprevious section) into Key box. Now you have an SSH key specific to RStudio.\n\n# Creating a new project in RStudio\n\nIn RStudio, select File -> New Project -> New Directory -> New Project.\n\nChoose a directory name (let's use the same as the name of your project, e.g. \"StatComp-[your SCIPER]\")\nand choose the folder in which this new directory will be created. Make sure to\ncheck \"Create a git repository\". Click \"Create Project\". A fresh RStudio without\nthe top-left pane but with an additional Git tab in the top-right pane will open.\nNow you can copy-files into the new directory and open them\n(in the top-left pane, which will appear),\nor create new files and save them to the directory.\n\nFor the purposes of the next section, create a new a R Script and write some sample code\nin it, for example\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- runif(100)\n```\n:::\n\n\nand save the script in your project folder.\n\n# Linking the project to GitHub\n\nNow go back to the GitHub tab (to your account on GitHub) and create a new repository of the same name as\nthe project (e.g. \"StatComp-[your SCIPER]\"). Choose the private option.\n\nAfter clicking \"Create repository\", you will see the following:\n\n\n![new github repository](../../images/NewGitHubRepo.png)\n\nInstead of using the HTTPS link, click on the SSH and copy the text, which will be of the form\n`git@github.com:TMasak/StatComp.git`. Open the Terminal tab in the bottom-left pane of RStudio\nand begin by providing your name and your e-mail to Git:\n```\ngit config --global user.name [your github name]\ngit config --global user.email [your email address]\n```\nYou can check whether it worked by typing `git config --global --list`.\n\nNow to finally link your local project folder to the GitHub repo, type the following commands in the terminal:\n```\nssh -T git@github.com\ngit remote add origin [your SSH link of the form git@github.com:your_github_name/repo_name.git goes here]\ngit push -u origin master\n```\n\n*Note*: If you receive an error:\n\n* try `git push -u origin main` instead of `master`, and if still an error:\n* try `git add --all` and `git commit -m \"blahblah\"` before `git push -u origin master` or `main`.\n\nBut if that still doesn't work, go to the sub-section below.\n\nNow the content of the project folder should be up on GitHub. Return to the webpage,\nand click on your repo name in the top-left to see the repository.\n\n\n## In case of catastrophic errors\n\nIf you have too many issues in these past two steps, try removing everything you created in these steps (github repository and RStudio project: don't worry you will be able to recreate them). Then \n\n  1. Create a private repository, with nothing in it (in the `Initialize this repository`, let everything not ticked or set as `None`)\n  2. Follow the `…or create a new repository on the command line`. You first need to open the terminal in the directory where you want to save your project (e.g., `cd ~/Desktop/`), and then copy-paste the instructions. This should look like \n    \n      ```\n          echo \"# test\" >> README.md\n          git init\n          git add README.md\n          git commit -m \"first commit\"\n          git branch -M main\n          git remote add origin git@github.com:dufourc1/test.git\n          git push -u origin main\n      ```\n  3. Create a new RStudio project with an existing directory (pick the directory that was created by the above actions. In this example it will be `~/Desktop/test/`. You can fetch the correct path by typing `pwd` in the terminal after the above steps).\n  4. add, commit and push. You're all set !\n\n## Error when pushing from RStudio\n\nSkip this section if the procedure above has been successful.\n\nSometimes there can be problems with the initial commit and the procedure above may fail. Instead of trying to debug it, let's go the other way:\ncreate a repo on GitHub, and pull it from there to a local directory.\n\nBefore doing this, check that\n\n* you are logged in to GitHub with the account name being the same as the one provided to Git\n* your user directory and thus your SSH key as well as your working directory contain no non-English symbols (it might be also good to avoid spaces in your paths)\n\nClose your RStudio, and delete the local directory (and the RStudio project with it). Go to your repo in GitHub and click\non \"creating a new file\" (like in the picture above). Name it e.g. \"demo.R\" and type `x <- runif(100)` in it. Scroll down and click \"Commit new file\".\n\nOpen RStudio again, and go to File -> New Project -> Version Control -> Git. Here type the repository URL (like in the picture above) of the form `https://github.com/your_github_name/repo_name.git`. Click \"Create Project\". RStudio will restart\nand a local folder in your system will appear, containing whatever is there in the GitHub plus\nan R project file of the appropriate name.\n\nImmediately, open the Git tab in the top-right pane of the RStudio, and click on Push. If GitHub is not connected to the local Git client, a pop-up window will appear and you can simply choose to verify the access in your browser. Then the push will hopefully go through, even though \"Everything up-to-date\" line will be returned. (This is not true, but any changes has to be committed first before they can be pushed, which we learn to do in the following section.)\n\n# Basic Workflow\n\nNow when you make a change locally in your project folder, such as changing the R code to\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- sin(runif(100))\n```\n:::\n\n\nand you would like to push your changes to GitHub, run the following R commands first:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# # install.packages(\"devtools\")\n# library(devtools)\nuse_git()\n```\n:::\n\n\nFunction `use_git()` from the `devtools` package will commit changes.\n\n*Note*: The hashtag denotes a comment in R (whatever that should NOT be evaluated).\nIt is a common practice to include commented lines into manuals such as this one to\nhelp the reader (you) deal with a problem he might encounter. For example, here,\nif running `use_git()` returns an error, it is likely due to the fact that the\n`use_git()` function belongs to the `devtools` package, which has to be loaded each\ntime a new session of R is started (usually whenever you open RStudio). Hence uncomment the middle line and try to run it again. In case\nloading the package probably also returns an error, likely due to the fact the package\nthat is being loaded has not been installed, which can be done using the `install.packages()` function in the first line of the code. Installing a package is something you only need to do once on your system.\n\nThen open 'Git' bar in the top-right pane of Rstudio and click \"Push\". Your\nchanges are now propagated to GitHub.\n\nView your script on Github. Make some changes locally in RStudio, push those changes, and observe them on GitHub. Or the other way around, edit the script on GitHub\n\n# Sharing your Repo\n\nYou now have your own repo on GitHub, wich looks similarly to the [course repo](https://github.com/TMasak/StatComp).\n\n* Make sure that the repo is private. Go to Settings -> General and scroll all the way down. If you see \"This repository is currently private\", skip to the next point. On the other hand, if the repo is public, click on \"Change visibility\" and make the repo private.\n\n* Go to Settings -> Collaborators and add me (TMasak) and Almond (Almond-S) as collaborators by clicking on \"Add people\". \n\nYou may also share your repo with your friends this way, though there is a little point in doing it now. \n\n# Accessing and Downloading the Course Content\n\nNow, when the GitHub + RStudio connection is established, it can also be used to access the course materials easily. In RStudio, select File -> New Project -> Version Control -> Git and type\n```\nhttps://github.com/TMasak/StatComp.git\n```\nas the repository URL.\n\nThe whole content of the course's GitHub repo will be automatically downloaded. This repo will be gradually updated. Whenever you want to update your local repository, you can just click \"Pull\" in the Git tab in the top-right pane of RStudio.\n\n# References\n\n - [Happy Git with R](https://happygitwithr.com/) -- how to use Git, GitHub and RStudio\n together, mostly for data science purposes\n\n\n\n\n",
    "supporting": [
      "github_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}