---
title:  "Good practices in `Python`"
subtitle: "How to write better code"
description: "Tips and tricks for writing better code"
---


:::{.callout-important}
**üèó Under construction**
:::

## Writing Clean and Readable Code

```python
# Good: Use meaningful variable names and comments
population_size = 1000  # Number of individuals in the population
sample_size = 100       # Number of individuals in the sample

# Avoid: Using unclear or abbreviated variable names
ps = 1000
ss = 100
```

## Using Comments and Documentation


```python
# Good: Add comments to explain complex operations or logic
def calculate_mean(data):
    # Calculate the sum of elements in the data
    total = sum(data)
    
    # Calculate the mean by dividing the total by the number of elements
    mean_value = total / len(data)
    
    return mean_value

# Avoid: Lack of comments and explanation
def calc_mean(d):
    t = sum(d)
    m = t / len(d)
    return m
```

## Avoiding Global Variables and Code Dependencies


```python
# Good: Use local variables within functions to avoid global scope pollution
def calculate_variance(data):
    n = len(data)
    mean_value = sum(data) / n
    
    # Calculate the variance using local variables
    variance = sum((data - mean_value)**2) / (n - 1)
    
    return variance

# Avoid: Using global variables in functions
mean_value = 0
def calc_variance(data):
    n = len(data)
    global mean_value
    mean_value = sum(data) / n
    
    # Calculate the variance using global variables
    variance = sum((data - mean_value)**2) / (n - 1)
    
    return variance
```
